//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Scheduler.BusinessLayer {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private viewPayrollByInstructorDataTable tableviewPayrollByInstructor;
        
        private GetPayrollByInstructorDataTable tableGetPayrollByInstructor;
        
        private viewInstructorPaymentDetailsDataTable tableviewInstructorPaymentDetails;
        
        private viewSimpleProgramInfoDataTable tableviewSimpleProgramInfo;
        
        private ViewProgramReportDataTable tableViewProgramReport;
        
        private viewProgramReportClassDetailsDataTable tableviewProgramReportClassDetails;
        
        private PivotReportDataTable tablePivotReport;
        
        private viewPivotCourseDetailsDataTable tableviewPivotCourseDetails;
        
        private global::System.Data.DataRelation relationViewProgramReport_viewProgramReportClassDetails;
        
        private global::System.Data.DataRelation relationViewProgramReport_PivotReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["viewPayrollByInstructor"] != null)) {
                    base.Tables.Add(new viewPayrollByInstructorDataTable(ds.Tables["viewPayrollByInstructor"]));
                }
                if ((ds.Tables["GetPayrollByInstructor"] != null)) {
                    base.Tables.Add(new GetPayrollByInstructorDataTable(ds.Tables["GetPayrollByInstructor"]));
                }
                if ((ds.Tables["viewInstructorPaymentDetails"] != null)) {
                    base.Tables.Add(new viewInstructorPaymentDetailsDataTable(ds.Tables["viewInstructorPaymentDetails"]));
                }
                if ((ds.Tables["viewSimpleProgramInfo"] != null)) {
                    base.Tables.Add(new viewSimpleProgramInfoDataTable(ds.Tables["viewSimpleProgramInfo"]));
                }
                if ((ds.Tables["ViewProgramReport"] != null)) {
                    base.Tables.Add(new ViewProgramReportDataTable(ds.Tables["ViewProgramReport"]));
                }
                if ((ds.Tables["viewProgramReportClassDetails"] != null)) {
                    base.Tables.Add(new viewProgramReportClassDetailsDataTable(ds.Tables["viewProgramReportClassDetails"]));
                }
                if ((ds.Tables["PivotReport"] != null)) {
                    base.Tables.Add(new PivotReportDataTable(ds.Tables["PivotReport"]));
                }
                if ((ds.Tables["viewPivotCourseDetails"] != null)) {
                    base.Tables.Add(new viewPivotCourseDetailsDataTable(ds.Tables["viewPivotCourseDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewPayrollByInstructorDataTable viewPayrollByInstructor {
            get {
                return this.tableviewPayrollByInstructor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPayrollByInstructorDataTable GetPayrollByInstructor {
            get {
                return this.tableGetPayrollByInstructor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewInstructorPaymentDetailsDataTable viewInstructorPaymentDetails {
            get {
                return this.tableviewInstructorPaymentDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewSimpleProgramInfoDataTable viewSimpleProgramInfo {
            get {
                return this.tableviewSimpleProgramInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewProgramReportDataTable ViewProgramReport {
            get {
                return this.tableViewProgramReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewProgramReportClassDetailsDataTable viewProgramReportClassDetails {
            get {
                return this.tableviewProgramReportClassDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PivotReportDataTable PivotReport {
            get {
                return this.tablePivotReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewPivotCourseDetailsDataTable viewPivotCourseDetails {
            get {
                return this.tableviewPivotCourseDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["viewPayrollByInstructor"] != null)) {
                    base.Tables.Add(new viewPayrollByInstructorDataTable(ds.Tables["viewPayrollByInstructor"]));
                }
                if ((ds.Tables["GetPayrollByInstructor"] != null)) {
                    base.Tables.Add(new GetPayrollByInstructorDataTable(ds.Tables["GetPayrollByInstructor"]));
                }
                if ((ds.Tables["viewInstructorPaymentDetails"] != null)) {
                    base.Tables.Add(new viewInstructorPaymentDetailsDataTable(ds.Tables["viewInstructorPaymentDetails"]));
                }
                if ((ds.Tables["viewSimpleProgramInfo"] != null)) {
                    base.Tables.Add(new viewSimpleProgramInfoDataTable(ds.Tables["viewSimpleProgramInfo"]));
                }
                if ((ds.Tables["ViewProgramReport"] != null)) {
                    base.Tables.Add(new ViewProgramReportDataTable(ds.Tables["ViewProgramReport"]));
                }
                if ((ds.Tables["viewProgramReportClassDetails"] != null)) {
                    base.Tables.Add(new viewProgramReportClassDetailsDataTable(ds.Tables["viewProgramReportClassDetails"]));
                }
                if ((ds.Tables["PivotReport"] != null)) {
                    base.Tables.Add(new PivotReportDataTable(ds.Tables["PivotReport"]));
                }
                if ((ds.Tables["viewPivotCourseDetails"] != null)) {
                    base.Tables.Add(new viewPivotCourseDetailsDataTable(ds.Tables["viewPivotCourseDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableviewPayrollByInstructor = ((viewPayrollByInstructorDataTable)(base.Tables["viewPayrollByInstructor"]));
            if ((initTable == true)) {
                if ((this.tableviewPayrollByInstructor != null)) {
                    this.tableviewPayrollByInstructor.InitVars();
                }
            }
            this.tableGetPayrollByInstructor = ((GetPayrollByInstructorDataTable)(base.Tables["GetPayrollByInstructor"]));
            if ((initTable == true)) {
                if ((this.tableGetPayrollByInstructor != null)) {
                    this.tableGetPayrollByInstructor.InitVars();
                }
            }
            this.tableviewInstructorPaymentDetails = ((viewInstructorPaymentDetailsDataTable)(base.Tables["viewInstructorPaymentDetails"]));
            if ((initTable == true)) {
                if ((this.tableviewInstructorPaymentDetails != null)) {
                    this.tableviewInstructorPaymentDetails.InitVars();
                }
            }
            this.tableviewSimpleProgramInfo = ((viewSimpleProgramInfoDataTable)(base.Tables["viewSimpleProgramInfo"]));
            if ((initTable == true)) {
                if ((this.tableviewSimpleProgramInfo != null)) {
                    this.tableviewSimpleProgramInfo.InitVars();
                }
            }
            this.tableViewProgramReport = ((ViewProgramReportDataTable)(base.Tables["ViewProgramReport"]));
            if ((initTable == true)) {
                if ((this.tableViewProgramReport != null)) {
                    this.tableViewProgramReport.InitVars();
                }
            }
            this.tableviewProgramReportClassDetails = ((viewProgramReportClassDetailsDataTable)(base.Tables["viewProgramReportClassDetails"]));
            if ((initTable == true)) {
                if ((this.tableviewProgramReportClassDetails != null)) {
                    this.tableviewProgramReportClassDetails.InitVars();
                }
            }
            this.tablePivotReport = ((PivotReportDataTable)(base.Tables["PivotReport"]));
            if ((initTable == true)) {
                if ((this.tablePivotReport != null)) {
                    this.tablePivotReport.InitVars();
                }
            }
            this.tableviewPivotCourseDetails = ((viewPivotCourseDetailsDataTable)(base.Tables["viewPivotCourseDetails"]));
            if ((initTable == true)) {
                if ((this.tableviewPivotCourseDetails != null)) {
                    this.tableviewPivotCourseDetails.InitVars();
                }
            }
            this.relationViewProgramReport_viewProgramReportClassDetails = this.Relations["ViewProgramReport_viewProgramReportClassDetails"];
            this.relationViewProgramReport_PivotReport = this.Relations["ViewProgramReport_PivotReport"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableviewPayrollByInstructor = new viewPayrollByInstructorDataTable();
            base.Tables.Add(this.tableviewPayrollByInstructor);
            this.tableGetPayrollByInstructor = new GetPayrollByInstructorDataTable();
            base.Tables.Add(this.tableGetPayrollByInstructor);
            this.tableviewInstructorPaymentDetails = new viewInstructorPaymentDetailsDataTable();
            base.Tables.Add(this.tableviewInstructorPaymentDetails);
            this.tableviewSimpleProgramInfo = new viewSimpleProgramInfoDataTable();
            base.Tables.Add(this.tableviewSimpleProgramInfo);
            this.tableViewProgramReport = new ViewProgramReportDataTable();
            base.Tables.Add(this.tableViewProgramReport);
            this.tableviewProgramReportClassDetails = new viewProgramReportClassDetailsDataTable();
            base.Tables.Add(this.tableviewProgramReportClassDetails);
            this.tablePivotReport = new PivotReportDataTable();
            base.Tables.Add(this.tablePivotReport);
            this.tableviewPivotCourseDetails = new viewPivotCourseDetailsDataTable();
            base.Tables.Add(this.tableviewPivotCourseDetails);
            this.relationViewProgramReport_viewProgramReportClassDetails = new global::System.Data.DataRelation("ViewProgramReport_viewProgramReportClassDetails", new global::System.Data.DataColumn[] {
                        this.tableViewProgramReport.ProgramIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableviewProgramReportClassDetails.ProgramIdColumn}, false);
            this.Relations.Add(this.relationViewProgramReport_viewProgramReportClassDetails);
            this.relationViewProgramReport_PivotReport = new global::System.Data.DataRelation("ViewProgramReport_PivotReport", new global::System.Data.DataColumn[] {
                        this.tableViewProgramReport.ProgramIdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePivotReport.ProgramIDColumn}, false);
            this.Relations.Add(this.relationViewProgramReport_PivotReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewPayrollByInstructor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPayrollByInstructor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewInstructorPaymentDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewSimpleProgramInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewProgramReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewProgramReportClassDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePivotReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewPivotCourseDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void viewPayrollByInstructorRowChangeEventHandler(object sender, viewPayrollByInstructorRowChangeEvent e);
        
        public delegate void GetPayrollByInstructorRowChangeEventHandler(object sender, GetPayrollByInstructorRowChangeEvent e);
        
        public delegate void viewInstructorPaymentDetailsRowChangeEventHandler(object sender, viewInstructorPaymentDetailsRowChangeEvent e);
        
        public delegate void viewSimpleProgramInfoRowChangeEventHandler(object sender, viewSimpleProgramInfoRowChangeEvent e);
        
        public delegate void ViewProgramReportRowChangeEventHandler(object sender, ViewProgramReportRowChangeEvent e);
        
        public delegate void viewProgramReportClassDetailsRowChangeEventHandler(object sender, viewProgramReportClassDetailsRowChangeEvent e);
        
        public delegate void PivotReportRowChangeEventHandler(object sender, PivotReportRowChangeEvent e);
        
        public delegate void viewPivotCourseDetailsRowChangeEventHandler(object sender, viewPivotCourseDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewPayrollByInstructorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTeacherID;
            
            private global::System.Data.DataColumn columnInstructorName;
            
            private global::System.Data.DataColumn columnTotalHours;
            
            private global::System.Data.DataColumn columnHourlyRate;
            
            private global::System.Data.DataColumn columnBasePayField;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnDayType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorDataTable() {
                this.TableName = "viewPayrollByInstructor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPayrollByInstructorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewPayrollByInstructorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeacherIDColumn {
                get {
                    return this.columnTeacherID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHoursColumn {
                get {
                    return this.columnTotalHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HourlyRateColumn {
                get {
                    return this.columnHourlyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasePayFieldColumn {
                get {
                    return this.columnBasePayField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayTypeColumn {
                get {
                    return this.columnDayType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow this[int index] {
                get {
                    return ((viewPayrollByInstructorRow)(this.Rows[index]));
                }
            }
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowChanging;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowChanged;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowDeleting;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewPayrollByInstructorRow(viewPayrollByInstructorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow AddviewPayrollByInstructorRow(int TeacherID, string InstructorName, decimal TotalHours, decimal HourlyRate, decimal BasePayField, decimal Total, string DayType) {
                viewPayrollByInstructorRow rowviewPayrollByInstructorRow = ((viewPayrollByInstructorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TeacherID,
                        InstructorName,
                        TotalHours,
                        HourlyRate,
                        BasePayField,
                        Total,
                        DayType};
                rowviewPayrollByInstructorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviewPayrollByInstructorRow);
                return rowviewPayrollByInstructorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viewPayrollByInstructorDataTable cln = ((viewPayrollByInstructorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viewPayrollByInstructorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeacherID = base.Columns["TeacherID"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnTotalHours = base.Columns["TotalHours"];
                this.columnHourlyRate = base.Columns["HourlyRate"];
                this.columnBasePayField = base.Columns["BasePayField"];
                this.columnTotal = base.Columns["Total"];
                this.columnDayType = base.Columns["DayType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeacherID = new global::System.Data.DataColumn("TeacherID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherID);
                this.columnInstructorName = new global::System.Data.DataColumn("InstructorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnTotalHours = new global::System.Data.DataColumn("TotalHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHours);
                this.columnHourlyRate = new global::System.Data.DataColumn("HourlyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHourlyRate);
                this.columnBasePayField = new global::System.Data.DataColumn("BasePayField", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePayField);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnDayType = new global::System.Data.DataColumn("DayType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayType);
                this.columnInstructorName.MaxLength = 512;
                this.columnTotal.ReadOnly = true;
                this.columnDayType.AllowDBNull = false;
                this.columnDayType.MaxLength = 8;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow NewviewPayrollByInstructorRow() {
                return ((viewPayrollByInstructorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viewPayrollByInstructorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viewPayrollByInstructorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewPayrollByInstructorRowChanged != null)) {
                    this.viewPayrollByInstructorRowChanged(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewPayrollByInstructorRowChanging != null)) {
                    this.viewPayrollByInstructorRowChanging(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewPayrollByInstructorRowDeleted != null)) {
                    this.viewPayrollByInstructorRowDeleted(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewPayrollByInstructorRowDeleting != null)) {
                    this.viewPayrollByInstructorRowDeleting(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewPayrollByInstructorRow(viewPayrollByInstructorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewPayrollByInstructorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPayrollByInstructorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTeacherID;
            
            private global::System.Data.DataColumn columnInstructorName;
            
            private global::System.Data.DataColumn columnTotalHours;
            
            private global::System.Data.DataColumn columnHourlyRate;
            
            private global::System.Data.DataColumn columnBasePayField;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnDayType;
            
            private global::System.Data.DataColumn columnTimeStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorDataTable() {
                this.TableName = "GetPayrollByInstructor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPayrollByInstructorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPayrollByInstructorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeacherIDColumn {
                get {
                    return this.columnTeacherID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHoursColumn {
                get {
                    return this.columnTotalHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HourlyRateColumn {
                get {
                    return this.columnHourlyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasePayFieldColumn {
                get {
                    return this.columnBasePayField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayTypeColumn {
                get {
                    return this.columnDayType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStatusColumn {
                get {
                    return this.columnTimeStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow this[int index] {
                get {
                    return ((GetPayrollByInstructorRow)(this.Rows[index]));
                }
            }
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowChanging;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowChanged;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowDeleting;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPayrollByInstructorRow(GetPayrollByInstructorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow AddGetPayrollByInstructorRow(int TeacherID, string InstructorName, decimal TotalHours, decimal HourlyRate, decimal BasePayField, decimal Total, string DayType, string TimeStatus) {
                GetPayrollByInstructorRow rowGetPayrollByInstructorRow = ((GetPayrollByInstructorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TeacherID,
                        InstructorName,
                        TotalHours,
                        HourlyRate,
                        BasePayField,
                        Total,
                        DayType,
                        TimeStatus};
                rowGetPayrollByInstructorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPayrollByInstructorRow);
                return rowGetPayrollByInstructorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetPayrollByInstructorDataTable cln = ((GetPayrollByInstructorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPayrollByInstructorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeacherID = base.Columns["TeacherID"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnTotalHours = base.Columns["TotalHours"];
                this.columnHourlyRate = base.Columns["HourlyRate"];
                this.columnBasePayField = base.Columns["BasePayField"];
                this.columnTotal = base.Columns["Total"];
                this.columnDayType = base.Columns["DayType"];
                this.columnTimeStatus = base.Columns["TimeStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeacherID = new global::System.Data.DataColumn("TeacherID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherID);
                this.columnInstructorName = new global::System.Data.DataColumn("InstructorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnTotalHours = new global::System.Data.DataColumn("TotalHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHours);
                this.columnHourlyRate = new global::System.Data.DataColumn("HourlyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHourlyRate);
                this.columnBasePayField = new global::System.Data.DataColumn("BasePayField", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePayField);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnDayType = new global::System.Data.DataColumn("DayType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayType);
                this.columnTimeStatus = new global::System.Data.DataColumn("TimeStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStatus);
                this.columnTeacherID.ReadOnly = true;
                this.columnInstructorName.ReadOnly = true;
                this.columnInstructorName.MaxLength = 512;
                this.columnTotalHours.ReadOnly = true;
                this.columnHourlyRate.ReadOnly = true;
                this.columnTotal.ReadOnly = true;
                this.columnDayType.ReadOnly = true;
                this.columnDayType.MaxLength = 8;
                this.columnTimeStatus.ReadOnly = true;
                this.columnTimeStatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow NewGetPayrollByInstructorRow() {
                return ((GetPayrollByInstructorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPayrollByInstructorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetPayrollByInstructorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPayrollByInstructorRowChanged != null)) {
                    this.GetPayrollByInstructorRowChanged(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPayrollByInstructorRowChanging != null)) {
                    this.GetPayrollByInstructorRowChanging(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPayrollByInstructorRowDeleted != null)) {
                    this.GetPayrollByInstructorRowDeleted(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPayrollByInstructorRowDeleting != null)) {
                    this.GetPayrollByInstructorRowDeleting(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPayrollByInstructorRow(GetPayrollByInstructorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPayrollByInstructorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewInstructorPaymentDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCalendarEventId;
            
            private global::System.Data.DataColumn columnTeacherId;
            
            private global::System.Data.DataColumn columnInstructorName;
            
            private global::System.Data.DataColumn columnStartDateTime;
            
            private global::System.Data.DataColumn columnEndDateTime;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnClientNickName;
            
            private global::System.Data.DataColumn columnProgramName;
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnJobType;
            
            private global::System.Data.DataColumn columnDayName;
            
            private global::System.Data.DataColumn columnScheduledHours;
            
            private global::System.Data.DataColumn columnPaidHours;
            
            private global::System.Data.DataColumn columnHomeworkMinutes;
            
            private global::System.Data.DataColumn columnBilling;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsDataTable() {
                this.TableName = "viewInstructorPaymentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewInstructorPaymentDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewInstructorPaymentDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalendarEventIdColumn {
                get {
                    return this.columnCalendarEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeacherIdColumn {
                get {
                    return this.columnTeacherId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateTimeColumn {
                get {
                    return this.columnEndDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNickNameColumn {
                get {
                    return this.columnClientNickName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramNameColumn {
                get {
                    return this.columnProgramName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobTypeColumn {
                get {
                    return this.columnJobType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayNameColumn {
                get {
                    return this.columnDayName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledHoursColumn {
                get {
                    return this.columnScheduledHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaidHoursColumn {
                get {
                    return this.columnPaidHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomeworkMinutesColumn {
                get {
                    return this.columnHomeworkMinutes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillingColumn {
                get {
                    return this.columnBilling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow this[int index] {
                get {
                    return ((viewInstructorPaymentDetailsRow)(this.Rows[index]));
                }
            }
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowChanging;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowChanged;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowDeleting;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewInstructorPaymentDetailsRow(viewInstructorPaymentDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow AddviewInstructorPaymentDetailsRow(int CalendarEventId, int TeacherId, string InstructorName, System.DateTime StartDateTime, System.DateTime EndDateTime, string ClientName, string ClientNickName, string ProgramName, string Class, string JobType, string DayName, decimal ScheduledHours, decimal PaidHours, decimal HomeworkMinutes, string Billing) {
                viewInstructorPaymentDetailsRow rowviewInstructorPaymentDetailsRow = ((viewInstructorPaymentDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CalendarEventId,
                        TeacherId,
                        InstructorName,
                        StartDateTime,
                        EndDateTime,
                        ClientName,
                        ClientNickName,
                        ProgramName,
                        Class,
                        JobType,
                        DayName,
                        ScheduledHours,
                        PaidHours,
                        HomeworkMinutes,
                        Billing};
                rowviewInstructorPaymentDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviewInstructorPaymentDetailsRow);
                return rowviewInstructorPaymentDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow FindByCalendarEventId(int CalendarEventId) {
                return ((viewInstructorPaymentDetailsRow)(this.Rows.Find(new object[] {
                            CalendarEventId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viewInstructorPaymentDetailsDataTable cln = ((viewInstructorPaymentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viewInstructorPaymentDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCalendarEventId = base.Columns["CalendarEventId"];
                this.columnTeacherId = base.Columns["TeacherId"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnEndDateTime = base.Columns["EndDateTime"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnClientNickName = base.Columns["ClientNickName"];
                this.columnProgramName = base.Columns["ProgramName"];
                this.columnClass = base.Columns["Class"];
                this.columnJobType = base.Columns["JobType"];
                this.columnDayName = base.Columns["DayName"];
                this.columnScheduledHours = base.Columns["ScheduledHours"];
                this.columnPaidHours = base.Columns["PaidHours"];
                this.columnHomeworkMinutes = base.Columns["HomeworkMinutes"];
                this.columnBilling = base.Columns["Billing"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCalendarEventId = new global::System.Data.DataColumn("CalendarEventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarEventId);
                this.columnTeacherId = new global::System.Data.DataColumn("TeacherId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherId);
                this.columnInstructorName = new global::System.Data.DataColumn("InstructorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnStartDateTime = new global::System.Data.DataColumn("StartDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnEndDateTime = new global::System.Data.DataColumn("EndDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDateTime);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnClientNickName = new global::System.Data.DataColumn("ClientNickName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNickName);
                this.columnProgramName = new global::System.Data.DataColumn("ProgramName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramName);
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnJobType = new global::System.Data.DataColumn("JobType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobType);
                this.columnDayName = new global::System.Data.DataColumn("DayName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayName);
                this.columnScheduledHours = new global::System.Data.DataColumn("ScheduledHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledHours);
                this.columnPaidHours = new global::System.Data.DataColumn("PaidHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaidHours);
                this.columnHomeworkMinutes = new global::System.Data.DataColumn("HomeworkMinutes", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomeworkMinutes);
                this.columnBilling = new global::System.Data.DataColumn("Billing", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBilling);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCalendarEventId}, true));
                this.columnCalendarEventId.AllowDBNull = false;
                this.columnCalendarEventId.Unique = true;
                this.columnTeacherId.ReadOnly = true;
                this.columnInstructorName.ReadOnly = true;
                this.columnInstructorName.MaxLength = 512;
                this.columnClientName.MaxLength = 255;
                this.columnClientNickName.MaxLength = 255;
                this.columnProgramName.AllowDBNull = false;
                this.columnProgramName.MaxLength = 255;
                this.columnClass.ReadOnly = true;
                this.columnClass.MaxLength = 255;
                this.columnJobType.ReadOnly = true;
                this.columnJobType.MaxLength = 60;
                this.columnDayName.ReadOnly = true;
                this.columnDayName.MaxLength = 30;
                this.columnScheduledHours.ReadOnly = true;
                this.columnPaidHours.ReadOnly = true;
                this.columnHomeworkMinutes.ReadOnly = true;
                this.columnBilling.ReadOnly = true;
                this.columnBilling.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow NewviewInstructorPaymentDetailsRow() {
                return ((viewInstructorPaymentDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viewInstructorPaymentDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viewInstructorPaymentDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewInstructorPaymentDetailsRowChanged != null)) {
                    this.viewInstructorPaymentDetailsRowChanged(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewInstructorPaymentDetailsRowChanging != null)) {
                    this.viewInstructorPaymentDetailsRowChanging(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewInstructorPaymentDetailsRowDeleted != null)) {
                    this.viewInstructorPaymentDetailsRowDeleted(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewInstructorPaymentDetailsRowDeleting != null)) {
                    this.viewInstructorPaymentDetailsRowDeleting(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewInstructorPaymentDetailsRow(viewInstructorPaymentDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewInstructorPaymentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewSimpleProgramInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProgramId;
            
            private global::System.Data.DataColumn columnProgramName;
            
            private global::System.Data.DataColumn columnCourseName;
            
            private global::System.Data.DataColumn columnStartDateTime;
            
            private global::System.Data.DataColumn columnEndDateTime;
            
            private global::System.Data.DataColumn columnCourseID;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoDataTable() {
                this.TableName = "viewSimpleProgramInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewSimpleProgramInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewSimpleProgramInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIdColumn {
                get {
                    return this.columnProgramId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramNameColumn {
                get {
                    return this.columnProgramName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseNameColumn {
                get {
                    return this.columnCourseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateTimeColumn {
                get {
                    return this.columnEndDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIDColumn {
                get {
                    return this.columnCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRow this[int index] {
                get {
                    return ((viewSimpleProgramInfoRow)(this.Rows[index]));
                }
            }
            
            public event viewSimpleProgramInfoRowChangeEventHandler viewSimpleProgramInfoRowChanging;
            
            public event viewSimpleProgramInfoRowChangeEventHandler viewSimpleProgramInfoRowChanged;
            
            public event viewSimpleProgramInfoRowChangeEventHandler viewSimpleProgramInfoRowDeleting;
            
            public event viewSimpleProgramInfoRowChangeEventHandler viewSimpleProgramInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewSimpleProgramInfoRow(viewSimpleProgramInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRow AddviewSimpleProgramInfoRow(int ProgramId, string ProgramName, string CourseName, string StartDateTime, string EndDateTime, int CourseID) {
                viewSimpleProgramInfoRow rowviewSimpleProgramInfoRow = ((viewSimpleProgramInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramId,
                        ProgramName,
                        CourseName,
                        StartDateTime,
                        EndDateTime,
                        CourseID,
                        null};
                rowviewSimpleProgramInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviewSimpleProgramInfoRow);
                return rowviewSimpleProgramInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRow FindByID(int ID) {
                return ((viewSimpleProgramInfoRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viewSimpleProgramInfoDataTable cln = ((viewSimpleProgramInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viewSimpleProgramInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramId = base.Columns["ProgramId"];
                this.columnProgramName = base.Columns["ProgramName"];
                this.columnCourseName = base.Columns["CourseName"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnEndDateTime = base.Columns["EndDateTime"];
                this.columnCourseID = base.Columns["CourseID"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramId = new global::System.Data.DataColumn("ProgramId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramId);
                this.columnProgramName = new global::System.Data.DataColumn("ProgramName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramName);
                this.columnCourseName = new global::System.Data.DataColumn("CourseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseName);
                this.columnStartDateTime = new global::System.Data.DataColumn("StartDateTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnEndDateTime = new global::System.Data.DataColumn("EndDateTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDateTime);
                this.columnCourseID = new global::System.Data.DataColumn("CourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseID);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("viewSimpleProgramInfoKey1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnProgramId.ReadOnly = true;
                this.columnProgramName.MaxLength = 255;
                this.columnCourseName.ReadOnly = true;
                this.columnCourseName.MaxLength = 255;
                this.columnCourseID.ReadOnly = true;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRow NewviewSimpleProgramInfoRow() {
                return ((viewSimpleProgramInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viewSimpleProgramInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viewSimpleProgramInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewSimpleProgramInfoRowChanged != null)) {
                    this.viewSimpleProgramInfoRowChanged(this, new viewSimpleProgramInfoRowChangeEvent(((viewSimpleProgramInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewSimpleProgramInfoRowChanging != null)) {
                    this.viewSimpleProgramInfoRowChanging(this, new viewSimpleProgramInfoRowChangeEvent(((viewSimpleProgramInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewSimpleProgramInfoRowDeleted != null)) {
                    this.viewSimpleProgramInfoRowDeleted(this, new viewSimpleProgramInfoRowChangeEvent(((viewSimpleProgramInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewSimpleProgramInfoRowDeleting != null)) {
                    this.viewSimpleProgramInfoRowDeleting(this, new viewSimpleProgramInfoRowChangeEvent(((viewSimpleProgramInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewSimpleProgramInfoRow(viewSimpleProgramInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewSimpleProgramInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewProgramReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProgramId;
            
            private global::System.Data.DataColumn columnDepartmentID;
            
            private global::System.Data.DataColumn columnDepartmentName;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnClientAddress;
            
            private global::System.Data.DataColumn columnContact1Email;
            
            private global::System.Data.DataColumn columnContact1Phone;
            
            private global::System.Data.DataColumn columnContact1Name;
            
            private global::System.Data.DataColumn columnContact2Phone;
            
            private global::System.Data.DataColumn columnContact2Name;
            
            private global::System.Data.DataColumn columnContact2Email;
            
            private global::System.Data.DataColumn columnProgramName;
            
            private global::System.Data.DataColumn columnTestInitialForm;
            
            private global::System.Data.DataColumn columnTestMidtermForm;
            
            private global::System.Data.DataColumn columnTestFinalForm;
            
            private global::System.Data.DataColumn columnInitialEventStartDate;
            
            private global::System.Data.DataColumn columnInitialEventEndDate;
            
            private global::System.Data.DataColumn columnInitialEventDateTime;
            
            private global::System.Data.DataColumn columnMidTermStartDate;
            
            private global::System.Data.DataColumn columnMidTermEndDate;
            
            private global::System.Data.DataColumn columnFinalStartDate;
            
            private global::System.Data.DataColumn columnFinalEndDate;
            
            private global::System.Data.DataColumn columnEvaluationMidtermForm;
            
            private global::System.Data.DataColumn columnEvaluationFinalForm;
            
            private global::System.Data.DataColumn columnQuestionaireMidtermForm;
            
            private global::System.Data.DataColumn columnQuestionaireFinalForm;
            
            private global::System.Data.DataColumn columnReportAttendence;
            
            private global::System.Data.DataColumn columnSpecialRemarks;
            
            private global::System.Data.DataColumn columnContact1Fax;
            
            private global::System.Data.DataColumn columnContact2Fax;
            
            private global::System.Data.DataColumn columnCourseSpecialRemarks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportDataTable() {
                this.TableName = "ViewProgramReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewProgramReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewProgramReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIdColumn {
                get {
                    return this.columnProgramId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientAddressColumn {
                get {
                    return this.columnClientAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact1EmailColumn {
                get {
                    return this.columnContact1Email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact1PhoneColumn {
                get {
                    return this.columnContact1Phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact1NameColumn {
                get {
                    return this.columnContact1Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact2PhoneColumn {
                get {
                    return this.columnContact2Phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact2NameColumn {
                get {
                    return this.columnContact2Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact2EmailColumn {
                get {
                    return this.columnContact2Email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramNameColumn {
                get {
                    return this.columnProgramName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestInitialFormColumn {
                get {
                    return this.columnTestInitialForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestMidtermFormColumn {
                get {
                    return this.columnTestMidtermForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestFinalFormColumn {
                get {
                    return this.columnTestFinalForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialEventStartDateColumn {
                get {
                    return this.columnInitialEventStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialEventEndDateColumn {
                get {
                    return this.columnInitialEventEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialEventDateTimeColumn {
                get {
                    return this.columnInitialEventDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MidTermStartDateColumn {
                get {
                    return this.columnMidTermStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MidTermEndDateColumn {
                get {
                    return this.columnMidTermEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalStartDateColumn {
                get {
                    return this.columnFinalStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalEndDateColumn {
                get {
                    return this.columnFinalEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluationMidtermFormColumn {
                get {
                    return this.columnEvaluationMidtermForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluationFinalFormColumn {
                get {
                    return this.columnEvaluationFinalForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionaireMidtermFormColumn {
                get {
                    return this.columnQuestionaireMidtermForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionaireFinalFormColumn {
                get {
                    return this.columnQuestionaireFinalForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportAttendenceColumn {
                get {
                    return this.columnReportAttendence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialRemarksColumn {
                get {
                    return this.columnSpecialRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact1FaxColumn {
                get {
                    return this.columnContact1Fax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contact2FaxColumn {
                get {
                    return this.columnContact2Fax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseSpecialRemarksColumn {
                get {
                    return this.columnCourseSpecialRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow this[int index] {
                get {
                    return ((ViewProgramReportRow)(this.Rows[index]));
                }
            }
            
            public event ViewProgramReportRowChangeEventHandler ViewProgramReportRowChanging;
            
            public event ViewProgramReportRowChangeEventHandler ViewProgramReportRowChanged;
            
            public event ViewProgramReportRowChangeEventHandler ViewProgramReportRowDeleting;
            
            public event ViewProgramReportRowChangeEventHandler ViewProgramReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewProgramReportRow(ViewProgramReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow AddViewProgramReportRow(
                        int ProgramId, 
                        int DepartmentID, 
                        string DepartmentName, 
                        string ClientName, 
                        string ClientAddress, 
                        string Contact1Email, 
                        string Contact1Phone, 
                        string Contact1Name, 
                        string Contact2Phone, 
                        string Contact2Name, 
                        string Contact2Email, 
                        string ProgramName, 
                        string TestInitialForm, 
                        string TestMidtermForm, 
                        string TestFinalForm, 
                        System.DateTime InitialEventStartDate, 
                        System.DateTime InitialEventEndDate, 
                        string InitialEventDateTime, 
                        System.DateTime MidTermStartDate, 
                        System.DateTime MidTermEndDate, 
                        System.DateTime FinalStartDate, 
                        System.DateTime FinalEndDate, 
                        string EvaluationMidtermForm, 
                        string EvaluationFinalForm, 
                        string QuestionaireMidtermForm, 
                        string QuestionaireFinalForm, 
                        string ReportAttendence, 
                        string SpecialRemarks, 
                        string Contact1Fax, 
                        string Contact2Fax, 
                        string CourseSpecialRemarks) {
                ViewProgramReportRow rowViewProgramReportRow = ((ViewProgramReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramId,
                        DepartmentID,
                        DepartmentName,
                        ClientName,
                        ClientAddress,
                        Contact1Email,
                        Contact1Phone,
                        Contact1Name,
                        Contact2Phone,
                        Contact2Name,
                        Contact2Email,
                        ProgramName,
                        TestInitialForm,
                        TestMidtermForm,
                        TestFinalForm,
                        InitialEventStartDate,
                        InitialEventEndDate,
                        InitialEventDateTime,
                        MidTermStartDate,
                        MidTermEndDate,
                        FinalStartDate,
                        FinalEndDate,
                        EvaluationMidtermForm,
                        EvaluationFinalForm,
                        QuestionaireMidtermForm,
                        QuestionaireFinalForm,
                        ReportAttendence,
                        SpecialRemarks,
                        Contact1Fax,
                        Contact2Fax,
                        CourseSpecialRemarks};
                rowViewProgramReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowViewProgramReportRow);
                return rowViewProgramReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ViewProgramReportDataTable cln = ((ViewProgramReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ViewProgramReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramId = base.Columns["ProgramId"];
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnClientAddress = base.Columns["ClientAddress"];
                this.columnContact1Email = base.Columns["Contact1Email"];
                this.columnContact1Phone = base.Columns["Contact1Phone"];
                this.columnContact1Name = base.Columns["Contact1Name"];
                this.columnContact2Phone = base.Columns["Contact2Phone"];
                this.columnContact2Name = base.Columns["Contact2Name"];
                this.columnContact2Email = base.Columns["Contact2Email"];
                this.columnProgramName = base.Columns["ProgramName"];
                this.columnTestInitialForm = base.Columns["TestInitialForm"];
                this.columnTestMidtermForm = base.Columns["TestMidtermForm"];
                this.columnTestFinalForm = base.Columns["TestFinalForm"];
                this.columnInitialEventStartDate = base.Columns["InitialEventStartDate"];
                this.columnInitialEventEndDate = base.Columns["InitialEventEndDate"];
                this.columnInitialEventDateTime = base.Columns["InitialEventDateTime"];
                this.columnMidTermStartDate = base.Columns["MidTermStartDate"];
                this.columnMidTermEndDate = base.Columns["MidTermEndDate"];
                this.columnFinalStartDate = base.Columns["FinalStartDate"];
                this.columnFinalEndDate = base.Columns["FinalEndDate"];
                this.columnEvaluationMidtermForm = base.Columns["EvaluationMidtermForm"];
                this.columnEvaluationFinalForm = base.Columns["EvaluationFinalForm"];
                this.columnQuestionaireMidtermForm = base.Columns["QuestionaireMidtermForm"];
                this.columnQuestionaireFinalForm = base.Columns["QuestionaireFinalForm"];
                this.columnReportAttendence = base.Columns["ReportAttendence"];
                this.columnSpecialRemarks = base.Columns["SpecialRemarks"];
                this.columnContact1Fax = base.Columns["Contact1Fax"];
                this.columnContact2Fax = base.Columns["Contact2Fax"];
                this.columnCourseSpecialRemarks = base.Columns["CourseSpecialRemarks"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramId = new global::System.Data.DataColumn("ProgramId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramId);
                this.columnDepartmentID = new global::System.Data.DataColumn("DepartmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnDepartmentName = new global::System.Data.DataColumn("DepartmentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnClientAddress = new global::System.Data.DataColumn("ClientAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientAddress);
                this.columnContact1Email = new global::System.Data.DataColumn("Contact1Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact1Email);
                this.columnContact1Phone = new global::System.Data.DataColumn("Contact1Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact1Phone);
                this.columnContact1Name = new global::System.Data.DataColumn("Contact1Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact1Name);
                this.columnContact2Phone = new global::System.Data.DataColumn("Contact2Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact2Phone);
                this.columnContact2Name = new global::System.Data.DataColumn("Contact2Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact2Name);
                this.columnContact2Email = new global::System.Data.DataColumn("Contact2Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact2Email);
                this.columnProgramName = new global::System.Data.DataColumn("ProgramName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramName);
                this.columnTestInitialForm = new global::System.Data.DataColumn("TestInitialForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestInitialForm);
                this.columnTestMidtermForm = new global::System.Data.DataColumn("TestMidtermForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestMidtermForm);
                this.columnTestFinalForm = new global::System.Data.DataColumn("TestFinalForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestFinalForm);
                this.columnInitialEventStartDate = new global::System.Data.DataColumn("InitialEventStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialEventStartDate);
                this.columnInitialEventEndDate = new global::System.Data.DataColumn("InitialEventEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialEventEndDate);
                this.columnInitialEventDateTime = new global::System.Data.DataColumn("InitialEventDateTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialEventDateTime);
                this.columnMidTermStartDate = new global::System.Data.DataColumn("MidTermStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidTermStartDate);
                this.columnMidTermEndDate = new global::System.Data.DataColumn("MidTermEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidTermEndDate);
                this.columnFinalStartDate = new global::System.Data.DataColumn("FinalStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalStartDate);
                this.columnFinalEndDate = new global::System.Data.DataColumn("FinalEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalEndDate);
                this.columnEvaluationMidtermForm = new global::System.Data.DataColumn("EvaluationMidtermForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluationMidtermForm);
                this.columnEvaluationFinalForm = new global::System.Data.DataColumn("EvaluationFinalForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluationFinalForm);
                this.columnQuestionaireMidtermForm = new global::System.Data.DataColumn("QuestionaireMidtermForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionaireMidtermForm);
                this.columnQuestionaireFinalForm = new global::System.Data.DataColumn("QuestionaireFinalForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionaireFinalForm);
                this.columnReportAttendence = new global::System.Data.DataColumn("ReportAttendence", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAttendence);
                this.columnSpecialRemarks = new global::System.Data.DataColumn("SpecialRemarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialRemarks);
                this.columnContact1Fax = new global::System.Data.DataColumn("Contact1Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact1Fax);
                this.columnContact2Fax = new global::System.Data.DataColumn("Contact2Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact2Fax);
                this.columnCourseSpecialRemarks = new global::System.Data.DataColumn("CourseSpecialRemarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseSpecialRemarks);
                this.columnProgramId.AllowDBNull = false;
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentName.ReadOnly = true;
                this.columnDepartmentName.MaxLength = 255;
                this.columnClientName.ReadOnly = true;
                this.columnClientName.MaxLength = 255;
                this.columnClientAddress.ReadOnly = true;
                this.columnClientAddress.MaxLength = 410;
                this.columnContact1Email.MaxLength = 255;
                this.columnContact1Phone.MaxLength = 50;
                this.columnContact1Name.ReadOnly = true;
                this.columnContact1Name.MaxLength = 512;
                this.columnContact2Phone.MaxLength = 50;
                this.columnContact2Name.ReadOnly = true;
                this.columnContact2Name.MaxLength = 512;
                this.columnContact2Email.MaxLength = 255;
                this.columnProgramName.ReadOnly = true;
                this.columnProgramName.MaxLength = 255;
                this.columnTestInitialForm.MaxLength = 50;
                this.columnTestMidtermForm.MaxLength = 50;
                this.columnTestFinalForm.MaxLength = 50;
                this.columnInitialEventDateTime.ReadOnly = true;
                this.columnInitialEventDateTime.MaxLength = 103;
                this.columnEvaluationMidtermForm.MaxLength = 50;
                this.columnEvaluationFinalForm.MaxLength = 50;
                this.columnQuestionaireMidtermForm.MaxLength = 50;
                this.columnQuestionaireFinalForm.MaxLength = 50;
                this.columnReportAttendence.AllowDBNull = false;
                this.columnReportAttendence.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow NewViewProgramReportRow() {
                return ((ViewProgramReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ViewProgramReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ViewProgramReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewProgramReportRowChanged != null)) {
                    this.ViewProgramReportRowChanged(this, new ViewProgramReportRowChangeEvent(((ViewProgramReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewProgramReportRowChanging != null)) {
                    this.ViewProgramReportRowChanging(this, new ViewProgramReportRowChangeEvent(((ViewProgramReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewProgramReportRowDeleted != null)) {
                    this.ViewProgramReportRowDeleted(this, new ViewProgramReportRowChangeEvent(((ViewProgramReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewProgramReportRowDeleting != null)) {
                    this.ViewProgramReportRowDeleting(this, new ViewProgramReportRowChangeEvent(((ViewProgramReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewProgramReportRow(ViewProgramReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewProgramReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewProgramReportClassDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProgramId;
            
            private global::System.Data.DataColumn columnCourseName;
            
            private global::System.Data.DataColumn columnEventId;
            
            private global::System.Data.DataColumn columnStartDateTime;
            
            private global::System.Data.DataColumn columnEndDateTime;
            
            private global::System.Data.DataColumn columnCourseTime;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnRoomNumber;
            
            private global::System.Data.DataColumn columnPaidHours;
            
            private global::System.Data.DataColumn columnHomeworkMinutes;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCourseID;
            
            private global::System.Data.DataColumn columnCalendarEventId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsDataTable() {
                this.TableName = "viewProgramReportClassDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewProgramReportClassDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewProgramReportClassDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIdColumn {
                get {
                    return this.columnProgramId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseNameColumn {
                get {
                    return this.columnCourseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIdColumn {
                get {
                    return this.columnEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateTimeColumn {
                get {
                    return this.columnEndDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseTimeColumn {
                get {
                    return this.columnCourseTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoomNumberColumn {
                get {
                    return this.columnRoomNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaidHoursColumn {
                get {
                    return this.columnPaidHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomeworkMinutesColumn {
                get {
                    return this.columnHomeworkMinutes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIDColumn {
                get {
                    return this.columnCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalendarEventIdColumn {
                get {
                    return this.columnCalendarEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow this[int index] {
                get {
                    return ((viewProgramReportClassDetailsRow)(this.Rows[index]));
                }
            }
            
            public event viewProgramReportClassDetailsRowChangeEventHandler viewProgramReportClassDetailsRowChanging;
            
            public event viewProgramReportClassDetailsRowChangeEventHandler viewProgramReportClassDetailsRowChanged;
            
            public event viewProgramReportClassDetailsRowChangeEventHandler viewProgramReportClassDetailsRowDeleting;
            
            public event viewProgramReportClassDetailsRowChangeEventHandler viewProgramReportClassDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewProgramReportClassDetailsRow(viewProgramReportClassDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow AddviewProgramReportClassDetailsRow(ViewProgramReportRow parentViewProgramReportRowByViewProgramReport_viewProgramReportClassDetails, string CourseName, int EventId, System.DateTime StartDateTime, System.DateTime EndDateTime, string CourseTime, string Location, string RoomNumber, decimal PaidHours, string HomeworkMinutes, int Total, int CourseID, int CalendarEventId) {
                viewProgramReportClassDetailsRow rowviewProgramReportClassDetailsRow = ((viewProgramReportClassDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CourseName,
                        EventId,
                        StartDateTime,
                        EndDateTime,
                        CourseTime,
                        Location,
                        RoomNumber,
                        PaidHours,
                        HomeworkMinutes,
                        Total,
                        null,
                        CourseID,
                        CalendarEventId};
                if ((parentViewProgramReportRowByViewProgramReport_viewProgramReportClassDetails != null)) {
                    columnValuesArray[0] = parentViewProgramReportRowByViewProgramReport_viewProgramReportClassDetails[0];
                }
                rowviewProgramReportClassDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviewProgramReportClassDetailsRow);
                return rowviewProgramReportClassDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow FindByID(int ID) {
                return ((viewProgramReportClassDetailsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viewProgramReportClassDetailsDataTable cln = ((viewProgramReportClassDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viewProgramReportClassDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramId = base.Columns["ProgramId"];
                this.columnCourseName = base.Columns["CourseName"];
                this.columnEventId = base.Columns["EventId"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnEndDateTime = base.Columns["EndDateTime"];
                this.columnCourseTime = base.Columns["CourseTime"];
                this.columnLocation = base.Columns["Location"];
                this.columnRoomNumber = base.Columns["RoomNumber"];
                this.columnPaidHours = base.Columns["PaidHours"];
                this.columnHomeworkMinutes = base.Columns["HomeworkMinutes"];
                this.columnTotal = base.Columns["Total"];
                this.columnID = base.Columns["ID"];
                this.columnCourseID = base.Columns["CourseID"];
                this.columnCalendarEventId = base.Columns["CalendarEventId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramId = new global::System.Data.DataColumn("ProgramId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramId);
                this.columnCourseName = new global::System.Data.DataColumn("CourseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseName);
                this.columnEventId = new global::System.Data.DataColumn("EventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventId);
                this.columnStartDateTime = new global::System.Data.DataColumn("StartDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnEndDateTime = new global::System.Data.DataColumn("EndDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDateTime);
                this.columnCourseTime = new global::System.Data.DataColumn("CourseTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseTime);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnRoomNumber = new global::System.Data.DataColumn("RoomNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoomNumber);
                this.columnPaidHours = new global::System.Data.DataColumn("PaidHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaidHours);
                this.columnHomeworkMinutes = new global::System.Data.DataColumn("HomeworkMinutes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomeworkMinutes);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCourseID = new global::System.Data.DataColumn("CourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseID);
                this.columnCalendarEventId = new global::System.Data.DataColumn("CalendarEventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarEventId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnProgramId.AllowDBNull = false;
                this.columnCourseName.AllowDBNull = false;
                this.columnCourseName.MaxLength = 255;
                this.columnCourseTime.ReadOnly = true;
                this.columnCourseTime.MaxLength = 19;
                this.columnLocation.MaxLength = 50;
                this.columnRoomNumber.MaxLength = 50;
                this.columnPaidHours.ReadOnly = true;
                this.columnHomeworkMinutes.ReadOnly = true;
                this.columnHomeworkMinutes.MaxLength = 50;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow NewviewProgramReportClassDetailsRow() {
                return ((viewProgramReportClassDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viewProgramReportClassDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viewProgramReportClassDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewProgramReportClassDetailsRowChanged != null)) {
                    this.viewProgramReportClassDetailsRowChanged(this, new viewProgramReportClassDetailsRowChangeEvent(((viewProgramReportClassDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewProgramReportClassDetailsRowChanging != null)) {
                    this.viewProgramReportClassDetailsRowChanging(this, new viewProgramReportClassDetailsRowChangeEvent(((viewProgramReportClassDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewProgramReportClassDetailsRowDeleted != null)) {
                    this.viewProgramReportClassDetailsRowDeleted(this, new viewProgramReportClassDetailsRowChangeEvent(((viewProgramReportClassDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewProgramReportClassDetailsRowDeleting != null)) {
                    this.viewProgramReportClassDetailsRowDeleting(this, new viewProgramReportClassDetailsRowChangeEvent(((viewProgramReportClassDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewProgramReportClassDetailsRow(viewProgramReportClassDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewProgramReportClassDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PivotReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSun;
            
            private global::System.Data.DataColumn columnMon;
            
            private global::System.Data.DataColumn columnTue;
            
            private global::System.Data.DataColumn columnWed;
            
            private global::System.Data.DataColumn columnThu;
            
            private global::System.Data.DataColumn columnFri;
            
            private global::System.Data.DataColumn columnSat;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProgramID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportDataTable() {
                this.TableName = "PivotReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PivotReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PivotReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SunColumn {
                get {
                    return this.columnSun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonColumn {
                get {
                    return this.columnMon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TueColumn {
                get {
                    return this.columnTue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WedColumn {
                get {
                    return this.columnWed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThuColumn {
                get {
                    return this.columnThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriColumn {
                get {
                    return this.columnFri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SatColumn {
                get {
                    return this.columnSat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow this[int index] {
                get {
                    return ((PivotReportRow)(this.Rows[index]));
                }
            }
            
            public event PivotReportRowChangeEventHandler PivotReportRowChanging;
            
            public event PivotReportRowChangeEventHandler PivotReportRowChanged;
            
            public event PivotReportRowChangeEventHandler PivotReportRowDeleting;
            
            public event PivotReportRowChangeEventHandler PivotReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPivotReportRow(PivotReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow AddPivotReportRow(string Name, string Sun, string Mon, string Tue, string Wed, string Thu, string Fri, string Sat, ViewProgramReportRow parentViewProgramReportRowByViewProgramReport_PivotReport) {
                PivotReportRow rowPivotReportRow = ((PivotReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Sun,
                        Mon,
                        Tue,
                        Wed,
                        Thu,
                        Fri,
                        Sat,
                        null,
                        null};
                if ((parentViewProgramReportRowByViewProgramReport_PivotReport != null)) {
                    columnValuesArray[9] = parentViewProgramReportRowByViewProgramReport_PivotReport[0];
                }
                rowPivotReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPivotReportRow);
                return rowPivotReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow FindByID(int ID) {
                return ((PivotReportRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PivotReportDataTable cln = ((PivotReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PivotReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnSun = base.Columns["Sun"];
                this.columnMon = base.Columns["Mon"];
                this.columnTue = base.Columns["Tue"];
                this.columnWed = base.Columns["Wed"];
                this.columnThu = base.Columns["Thu"];
                this.columnFri = base.Columns["Fri"];
                this.columnSat = base.Columns["Sat"];
                this.columnID = base.Columns["ID"];
                this.columnProgramID = base.Columns["ProgramID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSun = new global::System.Data.DataColumn("Sun", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSun);
                this.columnMon = new global::System.Data.DataColumn("Mon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMon);
                this.columnTue = new global::System.Data.DataColumn("Tue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTue);
                this.columnWed = new global::System.Data.DataColumn("Wed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWed);
                this.columnThu = new global::System.Data.DataColumn("Thu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThu);
                this.columnFri = new global::System.Data.DataColumn("Fri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFri);
                this.columnSat = new global::System.Data.DataColumn("Sat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSat);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow NewPivotReportRow() {
                return ((PivotReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PivotReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PivotReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PivotReportRowChanged != null)) {
                    this.PivotReportRowChanged(this, new PivotReportRowChangeEvent(((PivotReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PivotReportRowChanging != null)) {
                    this.PivotReportRowChanging(this, new PivotReportRowChangeEvent(((PivotReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PivotReportRowDeleted != null)) {
                    this.PivotReportRowDeleted(this, new PivotReportRowChangeEvent(((PivotReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PivotReportRowDeleting != null)) {
                    this.PivotReportRowDeleting(this, new PivotReportRowChangeEvent(((PivotReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePivotReportRow(PivotReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PivotReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewPivotCourseDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProgramId;
            
            private global::System.Data.DataColumn columnEventId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnScheduledTeacherId;
            
            private global::System.Data.DataColumn columnStartDateTime;
            
            private global::System.Data.DataColumn columnDAYNAME;
            
            private global::System.Data.DataColumn columnInstructorName;
            
            private global::System.Data.DataColumn columnCourseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsDataTable() {
                this.TableName = "viewPivotCourseDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPivotCourseDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewPivotCourseDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIdColumn {
                get {
                    return this.columnProgramId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIdColumn {
                get {
                    return this.columnEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledTeacherIdColumn {
                get {
                    return this.columnScheduledTeacherId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DAYNAMEColumn {
                get {
                    return this.columnDAYNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIDColumn {
                get {
                    return this.columnCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsRow this[int index] {
                get {
                    return ((viewPivotCourseDetailsRow)(this.Rows[index]));
                }
            }
            
            public event viewPivotCourseDetailsRowChangeEventHandler viewPivotCourseDetailsRowChanging;
            
            public event viewPivotCourseDetailsRowChangeEventHandler viewPivotCourseDetailsRowChanged;
            
            public event viewPivotCourseDetailsRowChangeEventHandler viewPivotCourseDetailsRowDeleting;
            
            public event viewPivotCourseDetailsRowChangeEventHandler viewPivotCourseDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewPivotCourseDetailsRow(viewPivotCourseDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsRow AddviewPivotCourseDetailsRow(int ProgramId, int EventId, string Name, int ScheduledTeacherId, System.DateTime StartDateTime, string DAYNAME, string InstructorName, int CourseID) {
                viewPivotCourseDetailsRow rowviewPivotCourseDetailsRow = ((viewPivotCourseDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramId,
                        EventId,
                        Name,
                        ScheduledTeacherId,
                        StartDateTime,
                        DAYNAME,
                        InstructorName,
                        CourseID};
                rowviewPivotCourseDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviewPivotCourseDetailsRow);
                return rowviewPivotCourseDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viewPivotCourseDetailsDataTable cln = ((viewPivotCourseDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viewPivotCourseDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramId = base.Columns["ProgramId"];
                this.columnEventId = base.Columns["EventId"];
                this.columnName = base.Columns["Name"];
                this.columnScheduledTeacherId = base.Columns["ScheduledTeacherId"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnDAYNAME = base.Columns["DAYNAME"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnCourseID = base.Columns["CourseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramId = new global::System.Data.DataColumn("ProgramId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramId);
                this.columnEventId = new global::System.Data.DataColumn("EventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnScheduledTeacherId = new global::System.Data.DataColumn("ScheduledTeacherId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledTeacherId);
                this.columnStartDateTime = new global::System.Data.DataColumn("StartDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnDAYNAME = new global::System.Data.DataColumn("DAYNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDAYNAME);
                this.columnInstructorName = new global::System.Data.DataColumn("InstructorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnCourseID = new global::System.Data.DataColumn("CourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseID);
                this.columnProgramId.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 255;
                this.columnDAYNAME.ReadOnly = true;
                this.columnDAYNAME.MaxLength = 3;
                this.columnInstructorName.ReadOnly = true;
                this.columnInstructorName.MaxLength = 512;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsRow NewviewPivotCourseDetailsRow() {
                return ((viewPivotCourseDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viewPivotCourseDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viewPivotCourseDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewPivotCourseDetailsRowChanged != null)) {
                    this.viewPivotCourseDetailsRowChanged(this, new viewPivotCourseDetailsRowChangeEvent(((viewPivotCourseDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewPivotCourseDetailsRowChanging != null)) {
                    this.viewPivotCourseDetailsRowChanging(this, new viewPivotCourseDetailsRowChangeEvent(((viewPivotCourseDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewPivotCourseDetailsRowDeleted != null)) {
                    this.viewPivotCourseDetailsRowDeleted(this, new viewPivotCourseDetailsRowChangeEvent(((viewPivotCourseDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewPivotCourseDetailsRowDeleting != null)) {
                    this.viewPivotCourseDetailsRowDeleting(this, new viewPivotCourseDetailsRowChangeEvent(((viewPivotCourseDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewPivotCourseDetailsRow(viewPivotCourseDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewPivotCourseDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewPayrollByInstructorRow : global::System.Data.DataRow {
            
            private viewPayrollByInstructorDataTable tableviewPayrollByInstructor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPayrollByInstructorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewPayrollByInstructor = ((viewPayrollByInstructorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherID {
                get {
                    try {
                        return ((int)(this[this.tableviewPayrollByInstructor.TeacherIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeacherID\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TeacherIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableviewPayrollByInstructor.InstructorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'viewPayrollByInstructor\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.InstructorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.TotalHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHours\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TotalHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HourlyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.HourlyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HourlyRate\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.HourlyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasePayField {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.BasePayFieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasePayField\' in table \'viewPayrollByInstructor\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.BasePayFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayType {
                get {
                    return ((string)(this[this.tableviewPayrollByInstructor.DayTypeColumn]));
                }
                set {
                    this[this.tableviewPayrollByInstructor.DayTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIDNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TeacherIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIDNull() {
                this[this.tableviewPayrollByInstructor.TeacherIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.InstructorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableviewPayrollByInstructor.InstructorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHoursNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TotalHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHoursNull() {
                this[this.tableviewPayrollByInstructor.TotalHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHourlyRateNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.HourlyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHourlyRateNull() {
                this[this.tableviewPayrollByInstructor.HourlyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePayFieldNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.BasePayFieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePayFieldNull() {
                this[this.tableviewPayrollByInstructor.BasePayFieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableviewPayrollByInstructor.TotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPayrollByInstructorRow : global::System.Data.DataRow {
            
            private GetPayrollByInstructorDataTable tableGetPayrollByInstructor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPayrollByInstructorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPayrollByInstructor = ((GetPayrollByInstructorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherID {
                get {
                    try {
                        return ((int)(this[this.tableGetPayrollByInstructor.TeacherIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeacherID\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TeacherIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableGetPayrollByInstructor.InstructorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'GetPayrollByInstructor\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.InstructorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalHours {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.TotalHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHours\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TotalHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HourlyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.HourlyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HourlyRate\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.HourlyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasePayField {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.BasePayFieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasePayField\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.BasePayFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayType {
                get {
                    try {
                        return ((string)(this[this.tableGetPayrollByInstructor.DayTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayType\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.DayTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetPayrollByInstructor.TimeStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStatus\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TimeStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIDNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TeacherIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIDNull() {
                this[this.tableGetPayrollByInstructor.TeacherIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.InstructorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableGetPayrollByInstructor.InstructorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHoursNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TotalHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHoursNull() {
                this[this.tableGetPayrollByInstructor.TotalHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHourlyRateNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.HourlyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHourlyRateNull() {
                this[this.tableGetPayrollByInstructor.HourlyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePayFieldNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.BasePayFieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePayFieldNull() {
                this[this.tableGetPayrollByInstructor.BasePayFieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableGetPayrollByInstructor.TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayTypeNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.DayTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayTypeNull() {
                this[this.tableGetPayrollByInstructor.DayTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStatusNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TimeStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStatusNull() {
                this[this.tableGetPayrollByInstructor.TimeStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewInstructorPaymentDetailsRow : global::System.Data.DataRow {
            
            private viewInstructorPaymentDetailsDataTable tableviewInstructorPaymentDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewInstructorPaymentDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewInstructorPaymentDetails = ((viewInstructorPaymentDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarEventId {
                get {
                    return ((int)(this[this.tableviewInstructorPaymentDetails.CalendarEventIdColumn]));
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.CalendarEventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherId {
                get {
                    try {
                        return ((int)(this[this.tableviewInstructorPaymentDetails.TeacherIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeacherId\' in table \'viewInstructorPaymentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.TeacherIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.InstructorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.InstructorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDateTime\' in table \'viewInstructorPaymentDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDateTime\' in table \'viewInstructorPaymentDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'viewInstructorPaymentDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNickName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientNickName\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramName {
                get {
                    return ((string)(this[this.tableviewInstructorPaymentDetails.ProgramNameColumn]));
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ProgramNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Class\' in table \'viewInstructorPaymentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobType {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.JobTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobType\' in table \'viewInstructorPaymentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.JobTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.DayNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayName\' in table \'viewInstructorPaymentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.DayNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScheduledHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledHours\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PaidHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.PaidHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaidHours\' in table \'viewInstructorPaymentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.PaidHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HomeworkMinutes {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HomeworkMinutes\' in table \'viewInstructorPaymentDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Billing {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.BillingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Billing\' in table \'viewInstructorPaymentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.BillingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIdNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.TeacherIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIdNull() {
                this[this.tableviewInstructorPaymentDetails.TeacherIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.InstructorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableviewInstructorPaymentDetails.InstructorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.StartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateTimeNull() {
                this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateTimeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.EndDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateTimeNull() {
                this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableviewInstructorPaymentDetails.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNickNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClientNickNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNickNameNull() {
                this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNull() {
                this[this.tableviewInstructorPaymentDetails.ClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobTypeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.JobTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobTypeNull() {
                this[this.tableviewInstructorPaymentDetails.JobTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.DayNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNameNull() {
                this[this.tableviewInstructorPaymentDetails.DayNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledHoursNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ScheduledHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledHoursNull() {
                this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidHoursNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.PaidHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaidHoursNull() {
                this[this.tableviewInstructorPaymentDetails.PaidHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeworkMinutesNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeworkMinutesNull() {
                this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillingNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.BillingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillingNull() {
                this[this.tableviewInstructorPaymentDetails.BillingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewSimpleProgramInfoRow : global::System.Data.DataRow {
            
            private viewSimpleProgramInfoDataTable tableviewSimpleProgramInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewSimpleProgramInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewSimpleProgramInfo = ((viewSimpleProgramInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramId {
                get {
                    try {
                        return ((int)(this[this.tableviewSimpleProgramInfo.ProgramIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramId\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.ProgramIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramName {
                get {
                    try {
                        return ((string)(this[this.tableviewSimpleProgramInfo.ProgramNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramName\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.ProgramNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseName {
                get {
                    try {
                        return ((string)(this[this.tableviewSimpleProgramInfo.CourseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseName\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.CourseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartDateTime {
                get {
                    try {
                        return ((string)(this[this.tableviewSimpleProgramInfo.StartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDateTime\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.StartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDateTime {
                get {
                    try {
                        return ((string)(this[this.tableviewSimpleProgramInfo.EndDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDateTime\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.EndDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CourseID {
                get {
                    try {
                        return ((int)(this[this.tableviewSimpleProgramInfo.CourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseID\' in table \'viewSimpleProgramInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewSimpleProgramInfo.CourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableviewSimpleProgramInfo.IDColumn]));
                }
                set {
                    this[this.tableviewSimpleProgramInfo.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramIdNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.ProgramIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramIdNull() {
                this[this.tableviewSimpleProgramInfo.ProgramIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramNameNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.ProgramNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramNameNull() {
                this[this.tableviewSimpleProgramInfo.ProgramNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseNameNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.CourseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseNameNull() {
                this[this.tableviewSimpleProgramInfo.CourseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.StartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateTimeNull() {
                this[this.tableviewSimpleProgramInfo.StartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateTimeNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.EndDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateTimeNull() {
                this[this.tableviewSimpleProgramInfo.EndDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseIDNull() {
                return this.IsNull(this.tableviewSimpleProgramInfo.CourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseIDNull() {
                this[this.tableviewSimpleProgramInfo.CourseIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewProgramReportRow : global::System.Data.DataRow {
            
            private ViewProgramReportDataTable tableViewProgramReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewProgramReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewProgramReport = ((ViewProgramReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramId {
                get {
                    return ((int)(this[this.tableViewProgramReport.ProgramIdColumn]));
                }
                set {
                    this[this.tableViewProgramReport.ProgramIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentID {
                get {
                    return ((int)(this[this.tableViewProgramReport.DepartmentIDColumn]));
                }
                set {
                    this[this.tableViewProgramReport.DepartmentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.DepartmentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepartmentName\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.DepartmentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientAddress {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.ClientAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientAddress\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.ClientAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact1Email {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact1EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact1Email\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact1EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact1Phone {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact1PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact1Phone\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact1PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact1Name {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact1NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact1Name\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact1NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact2Phone {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact2PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact2Phone\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact2PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact2Name {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact2NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact2Name\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact2NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact2Email {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact2EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact2Email\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact2EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramName {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.ProgramNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramName\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.ProgramNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestInitialForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.TestInitialFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestInitialForm\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.TestInitialFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestMidtermForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.TestMidtermFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestMidtermForm\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.TestMidtermFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestFinalForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.TestFinalFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestFinalForm\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.TestFinalFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InitialEventStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.InitialEventStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialEventStartDate\' in table \'ViewProgramReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.InitialEventStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InitialEventEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.InitialEventEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialEventEndDate\' in table \'ViewProgramReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.InitialEventEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InitialEventDateTime {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.InitialEventDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialEventDateTime\' in table \'ViewProgramReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.InitialEventDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MidTermStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.MidTermStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidTermStartDate\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.MidTermStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MidTermEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.MidTermEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidTermEndDate\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.MidTermEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.FinalStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalStartDate\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.FinalStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableViewProgramReport.FinalEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalEndDate\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.FinalEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EvaluationMidtermForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.EvaluationMidtermFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EvaluationMidtermForm\' in table \'ViewProgramReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.EvaluationMidtermFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EvaluationFinalForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.EvaluationFinalFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EvaluationFinalForm\' in table \'ViewProgramReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.EvaluationFinalFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuestionaireMidtermForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.QuestionaireMidtermFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuestionaireMidtermForm\' in table \'ViewProgramReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.QuestionaireMidtermFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuestionaireFinalForm {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.QuestionaireFinalFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuestionaireFinalForm\' in table \'ViewProgramReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.QuestionaireFinalFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAttendence {
                get {
                    return ((string)(this[this.tableViewProgramReport.ReportAttendenceColumn]));
                }
                set {
                    this[this.tableViewProgramReport.ReportAttendenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialRemarks {
                get {
                    if (this.IsSpecialRemarksNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableViewProgramReport.SpecialRemarksColumn]));
                    }
                }
                set {
                    this[this.tableViewProgramReport.SpecialRemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact1Fax {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact1FaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact1Fax\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact1FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact2Fax {
                get {
                    try {
                        return ((string)(this[this.tableViewProgramReport.Contact2FaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact2Fax\' in table \'ViewProgramReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewProgramReport.Contact2FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseSpecialRemarks {
                get {
                    if (this.IsCourseSpecialRemarksNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableViewProgramReport.CourseSpecialRemarksColumn]));
                    }
                }
                set {
                    this[this.tableViewProgramReport.CourseSpecialRemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNameNull() {
                return this.IsNull(this.tableViewProgramReport.DepartmentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNameNull() {
                this[this.tableViewProgramReport.DepartmentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableViewProgramReport.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableViewProgramReport.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientAddressNull() {
                return this.IsNull(this.tableViewProgramReport.ClientAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientAddressNull() {
                this[this.tableViewProgramReport.ClientAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact1EmailNull() {
                return this.IsNull(this.tableViewProgramReport.Contact1EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact1EmailNull() {
                this[this.tableViewProgramReport.Contact1EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact1PhoneNull() {
                return this.IsNull(this.tableViewProgramReport.Contact1PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact1PhoneNull() {
                this[this.tableViewProgramReport.Contact1PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact1NameNull() {
                return this.IsNull(this.tableViewProgramReport.Contact1NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact1NameNull() {
                this[this.tableViewProgramReport.Contact1NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact2PhoneNull() {
                return this.IsNull(this.tableViewProgramReport.Contact2PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact2PhoneNull() {
                this[this.tableViewProgramReport.Contact2PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact2NameNull() {
                return this.IsNull(this.tableViewProgramReport.Contact2NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact2NameNull() {
                this[this.tableViewProgramReport.Contact2NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact2EmailNull() {
                return this.IsNull(this.tableViewProgramReport.Contact2EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact2EmailNull() {
                this[this.tableViewProgramReport.Contact2EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramNameNull() {
                return this.IsNull(this.tableViewProgramReport.ProgramNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramNameNull() {
                this[this.tableViewProgramReport.ProgramNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestInitialFormNull() {
                return this.IsNull(this.tableViewProgramReport.TestInitialFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestInitialFormNull() {
                this[this.tableViewProgramReport.TestInitialFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestMidtermFormNull() {
                return this.IsNull(this.tableViewProgramReport.TestMidtermFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestMidtermFormNull() {
                this[this.tableViewProgramReport.TestMidtermFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestFinalFormNull() {
                return this.IsNull(this.tableViewProgramReport.TestFinalFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestFinalFormNull() {
                this[this.tableViewProgramReport.TestFinalFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialEventStartDateNull() {
                return this.IsNull(this.tableViewProgramReport.InitialEventStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialEventStartDateNull() {
                this[this.tableViewProgramReport.InitialEventStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialEventEndDateNull() {
                return this.IsNull(this.tableViewProgramReport.InitialEventEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialEventEndDateNull() {
                this[this.tableViewProgramReport.InitialEventEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialEventDateTimeNull() {
                return this.IsNull(this.tableViewProgramReport.InitialEventDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialEventDateTimeNull() {
                this[this.tableViewProgramReport.InitialEventDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMidTermStartDateNull() {
                return this.IsNull(this.tableViewProgramReport.MidTermStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMidTermStartDateNull() {
                this[this.tableViewProgramReport.MidTermStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMidTermEndDateNull() {
                return this.IsNull(this.tableViewProgramReport.MidTermEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMidTermEndDateNull() {
                this[this.tableViewProgramReport.MidTermEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalStartDateNull() {
                return this.IsNull(this.tableViewProgramReport.FinalStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalStartDateNull() {
                this[this.tableViewProgramReport.FinalStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalEndDateNull() {
                return this.IsNull(this.tableViewProgramReport.FinalEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalEndDateNull() {
                this[this.tableViewProgramReport.FinalEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluationMidtermFormNull() {
                return this.IsNull(this.tableViewProgramReport.EvaluationMidtermFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluationMidtermFormNull() {
                this[this.tableViewProgramReport.EvaluationMidtermFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluationFinalFormNull() {
                return this.IsNull(this.tableViewProgramReport.EvaluationFinalFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluationFinalFormNull() {
                this[this.tableViewProgramReport.EvaluationFinalFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionaireMidtermFormNull() {
                return this.IsNull(this.tableViewProgramReport.QuestionaireMidtermFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionaireMidtermFormNull() {
                this[this.tableViewProgramReport.QuestionaireMidtermFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionaireFinalFormNull() {
                return this.IsNull(this.tableViewProgramReport.QuestionaireFinalFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionaireFinalFormNull() {
                this[this.tableViewProgramReport.QuestionaireFinalFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialRemarksNull() {
                return this.IsNull(this.tableViewProgramReport.SpecialRemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialRemarksNull() {
                this[this.tableViewProgramReport.SpecialRemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact1FaxNull() {
                return this.IsNull(this.tableViewProgramReport.Contact1FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact1FaxNull() {
                this[this.tableViewProgramReport.Contact1FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContact2FaxNull() {
                return this.IsNull(this.tableViewProgramReport.Contact2FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContact2FaxNull() {
                this[this.tableViewProgramReport.Contact2FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseSpecialRemarksNull() {
                return this.IsNull(this.tableViewProgramReport.CourseSpecialRemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseSpecialRemarksNull() {
                this[this.tableViewProgramReport.CourseSpecialRemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow[] GetviewProgramReportClassDetailsRows() {
                if ((this.Table.ChildRelations["ViewProgramReport_viewProgramReportClassDetails"] == null)) {
                    return new viewProgramReportClassDetailsRow[0];
                }
                else {
                    return ((viewProgramReportClassDetailsRow[])(base.GetChildRows(this.Table.ChildRelations["ViewProgramReport_viewProgramReportClassDetails"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow[] GetPivotReportRows() {
                if ((this.Table.ChildRelations["ViewProgramReport_PivotReport"] == null)) {
                    return new PivotReportRow[0];
                }
                else {
                    return ((PivotReportRow[])(base.GetChildRows(this.Table.ChildRelations["ViewProgramReport_PivotReport"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewProgramReportClassDetailsRow : global::System.Data.DataRow {
            
            private viewProgramReportClassDetailsDataTable tableviewProgramReportClassDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewProgramReportClassDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewProgramReportClassDetails = ((viewProgramReportClassDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramId {
                get {
                    return ((int)(this[this.tableviewProgramReportClassDetails.ProgramIdColumn]));
                }
                set {
                    this[this.tableviewProgramReportClassDetails.ProgramIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseName {
                get {
                    return ((string)(this[this.tableviewProgramReportClassDetails.CourseNameColumn]));
                }
                set {
                    this[this.tableviewProgramReportClassDetails.CourseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventId {
                get {
                    try {
                        return ((int)(this[this.tableviewProgramReportClassDetails.EventIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventId\' in table \'viewProgramReportClassDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.EventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableviewProgramReportClassDetails.StartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDateTime\' in table \'viewProgramReportClassDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.StartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableviewProgramReportClassDetails.EndDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDateTime\' in table \'viewProgramReportClassDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.EndDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseTime {
                get {
                    try {
                        return ((string)(this[this.tableviewProgramReportClassDetails.CourseTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseTime\' in table \'viewProgramReportClassDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.CourseTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableviewProgramReportClassDetails.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'viewProgramReportClassDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoomNumber {
                get {
                    try {
                        return ((string)(this[this.tableviewProgramReportClassDetails.RoomNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoomNumber\' in table \'viewProgramReportClassDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.RoomNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PaidHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewProgramReportClassDetails.PaidHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaidHours\' in table \'viewProgramReportClassDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.PaidHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HomeworkMinutes {
                get {
                    try {
                        return ((string)(this[this.tableviewProgramReportClassDetails.HomeworkMinutesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HomeworkMinutes\' in table \'viewProgramReportClassDetails\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.HomeworkMinutesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Total {
                get {
                    try {
                        return ((int)(this[this.tableviewProgramReportClassDetails.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'viewProgramReportClassDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableviewProgramReportClassDetails.IDColumn]));
                }
                set {
                    this[this.tableviewProgramReportClassDetails.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CourseID {
                get {
                    try {
                        return ((int)(this[this.tableviewProgramReportClassDetails.CourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseID\' in table \'viewProgramReportClassDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.CourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarEventId {
                get {
                    try {
                        return ((int)(this[this.tableviewProgramReportClassDetails.CalendarEventIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CalendarEventId\' in table \'viewProgramReportClassDetails\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProgramReportClassDetails.CalendarEventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow ViewProgramReportRow {
                get {
                    return ((ViewProgramReportRow)(this.GetParentRow(this.Table.ParentRelations["ViewProgramReport_viewProgramReportClassDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ViewProgramReport_viewProgramReportClassDetails"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIdNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.EventIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIdNull() {
                this[this.tableviewProgramReportClassDetails.EventIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.StartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateTimeNull() {
                this[this.tableviewProgramReportClassDetails.StartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateTimeNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.EndDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateTimeNull() {
                this[this.tableviewProgramReportClassDetails.EndDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseTimeNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.CourseTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseTimeNull() {
                this[this.tableviewProgramReportClassDetails.CourseTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableviewProgramReportClassDetails.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoomNumberNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.RoomNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoomNumberNull() {
                this[this.tableviewProgramReportClassDetails.RoomNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidHoursNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.PaidHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaidHoursNull() {
                this[this.tableviewProgramReportClassDetails.PaidHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeworkMinutesNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.HomeworkMinutesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeworkMinutesNull() {
                this[this.tableviewProgramReportClassDetails.HomeworkMinutesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableviewProgramReportClassDetails.TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseIDNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.CourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseIDNull() {
                this[this.tableviewProgramReportClassDetails.CourseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalendarEventIdNull() {
                return this.IsNull(this.tableviewProgramReportClassDetails.CalendarEventIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalendarEventIdNull() {
                this[this.tableviewProgramReportClassDetails.CalendarEventIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PivotReportRow : global::System.Data.DataRow {
            
            private PivotReportDataTable tablePivotReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PivotReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePivotReport = ((PivotReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sun {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.SunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sun\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.SunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mon {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.MonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mon\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.MonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tue {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.TueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tue\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.TueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wed {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.WedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wed\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.WedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thu {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.ThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thu\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.ThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fri {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.FriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fri\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.FriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sat {
                get {
                    try {
                        return ((string)(this[this.tablePivotReport.SatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sat\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.SatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePivotReport.IDColumn]));
                }
                set {
                    this[this.tablePivotReport.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramID {
                get {
                    try {
                        return ((int)(this[this.tablePivotReport.ProgramIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramID\' in table \'PivotReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePivotReport.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow ViewProgramReportRow {
                get {
                    return ((ViewProgramReportRow)(this.GetParentRow(this.Table.ParentRelations["ViewProgramReport_PivotReport"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ViewProgramReport_PivotReport"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePivotReport.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePivotReport.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSunNull() {
                return this.IsNull(this.tablePivotReport.SunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSunNull() {
                this[this.tablePivotReport.SunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonNull() {
                return this.IsNull(this.tablePivotReport.MonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonNull() {
                this[this.tablePivotReport.MonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTueNull() {
                return this.IsNull(this.tablePivotReport.TueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTueNull() {
                this[this.tablePivotReport.TueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWedNull() {
                return this.IsNull(this.tablePivotReport.WedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWedNull() {
                this[this.tablePivotReport.WedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThuNull() {
                return this.IsNull(this.tablePivotReport.ThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThuNull() {
                this[this.tablePivotReport.ThuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriNull() {
                return this.IsNull(this.tablePivotReport.FriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriNull() {
                this[this.tablePivotReport.FriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSatNull() {
                return this.IsNull(this.tablePivotReport.SatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSatNull() {
                this[this.tablePivotReport.SatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramIDNull() {
                return this.IsNull(this.tablePivotReport.ProgramIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramIDNull() {
                this[this.tablePivotReport.ProgramIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewPivotCourseDetailsRow : global::System.Data.DataRow {
            
            private viewPivotCourseDetailsDataTable tableviewPivotCourseDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPivotCourseDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewPivotCourseDetails = ((viewPivotCourseDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramId {
                get {
                    return ((int)(this[this.tableviewPivotCourseDetails.ProgramIdColumn]));
                }
                set {
                    this[this.tableviewPivotCourseDetails.ProgramIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventId {
                get {
                    try {
                        return ((int)(this[this.tableviewPivotCourseDetails.EventIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventId\' in table \'viewPivotCourseDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.EventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableviewPivotCourseDetails.NameColumn]));
                }
                set {
                    this[this.tableviewPivotCourseDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduledTeacherId {
                get {
                    try {
                        return ((int)(this[this.tableviewPivotCourseDetails.ScheduledTeacherIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledTeacherId\' in table \'viewPivotCourseDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.ScheduledTeacherIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableviewPivotCourseDetails.StartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDateTime\' in table \'viewPivotCourseDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.StartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DAYNAME {
                get {
                    try {
                        return ((string)(this[this.tableviewPivotCourseDetails.DAYNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DAYNAME\' in table \'viewPivotCourseDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.DAYNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableviewPivotCourseDetails.InstructorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'viewPivotCourseDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.InstructorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CourseID {
                get {
                    try {
                        return ((int)(this[this.tableviewPivotCourseDetails.CourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseID\' in table \'viewPivotCourseDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPivotCourseDetails.CourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIdNull() {
                return this.IsNull(this.tableviewPivotCourseDetails.EventIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIdNull() {
                this[this.tableviewPivotCourseDetails.EventIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledTeacherIdNull() {
                return this.IsNull(this.tableviewPivotCourseDetails.ScheduledTeacherIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledTeacherIdNull() {
                this[this.tableviewPivotCourseDetails.ScheduledTeacherIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableviewPivotCourseDetails.StartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateTimeNull() {
                this[this.tableviewPivotCourseDetails.StartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDAYNAMENull() {
                return this.IsNull(this.tableviewPivotCourseDetails.DAYNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDAYNAMENull() {
                this[this.tableviewPivotCourseDetails.DAYNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableviewPivotCourseDetails.InstructorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableviewPivotCourseDetails.InstructorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseIDNull() {
                return this.IsNull(this.tableviewPivotCourseDetails.CourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseIDNull() {
                this[this.tableviewPivotCourseDetails.CourseIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewPayrollByInstructorRowChangeEvent : global::System.EventArgs {
            
            private viewPayrollByInstructorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRowChangeEvent(viewPayrollByInstructorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPayrollByInstructorRowChangeEvent : global::System.EventArgs {
            
            private GetPayrollByInstructorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRowChangeEvent(GetPayrollByInstructorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewInstructorPaymentDetailsRowChangeEvent : global::System.EventArgs {
            
            private viewInstructorPaymentDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRowChangeEvent(viewInstructorPaymentDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewSimpleProgramInfoRowChangeEvent : global::System.EventArgs {
            
            private viewSimpleProgramInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRowChangeEvent(viewSimpleProgramInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewSimpleProgramInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewProgramReportRowChangeEvent : global::System.EventArgs {
            
            private ViewProgramReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRowChangeEvent(ViewProgramReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewProgramReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewProgramReportClassDetailsRowChangeEvent : global::System.EventArgs {
            
            private viewProgramReportClassDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRowChangeEvent(viewProgramReportClassDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewProgramReportClassDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PivotReportRowChangeEvent : global::System.EventArgs {
            
            private PivotReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRowChangeEvent(PivotReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PivotReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewPivotCourseDetailsRowChangeEvent : global::System.EventArgs {
            
            private viewPivotCourseDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsRowChangeEvent(viewPivotCourseDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPivotCourseDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591