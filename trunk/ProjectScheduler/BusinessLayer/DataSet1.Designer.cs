//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Scheduler.BusinessLayer {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private viewPayrollByInstructorDataTable tableviewPayrollByInstructor;
        
        private GetPayrollByInstructorDataTable tableGetPayrollByInstructor;
        
        private viewInstructorPaymentDetailsDataTable tableviewInstructorPaymentDetails;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["viewPayrollByInstructor"] != null)) {
                    base.Tables.Add(new viewPayrollByInstructorDataTable(ds.Tables["viewPayrollByInstructor"]));
                }
                if ((ds.Tables["GetPayrollByInstructor"] != null)) {
                    base.Tables.Add(new GetPayrollByInstructorDataTable(ds.Tables["GetPayrollByInstructor"]));
                }
                if ((ds.Tables["viewInstructorPaymentDetails"] != null)) {
                    base.Tables.Add(new viewInstructorPaymentDetailsDataTable(ds.Tables["viewInstructorPaymentDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewPayrollByInstructorDataTable viewPayrollByInstructor {
            get {
                return this.tableviewPayrollByInstructor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPayrollByInstructorDataTable GetPayrollByInstructor {
            get {
                return this.tableGetPayrollByInstructor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewInstructorPaymentDetailsDataTable viewInstructorPaymentDetails {
            get {
                return this.tableviewInstructorPaymentDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["viewPayrollByInstructor"] != null)) {
                    base.Tables.Add(new viewPayrollByInstructorDataTable(ds.Tables["viewPayrollByInstructor"]));
                }
                if ((ds.Tables["GetPayrollByInstructor"] != null)) {
                    base.Tables.Add(new GetPayrollByInstructorDataTable(ds.Tables["GetPayrollByInstructor"]));
                }
                if ((ds.Tables["viewInstructorPaymentDetails"] != null)) {
                    base.Tables.Add(new viewInstructorPaymentDetailsDataTable(ds.Tables["viewInstructorPaymentDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableviewPayrollByInstructor = ((viewPayrollByInstructorDataTable)(base.Tables["viewPayrollByInstructor"]));
            if ((initTable == true)) {
                if ((this.tableviewPayrollByInstructor != null)) {
                    this.tableviewPayrollByInstructor.InitVars();
                }
            }
            this.tableGetPayrollByInstructor = ((GetPayrollByInstructorDataTable)(base.Tables["GetPayrollByInstructor"]));
            if ((initTable == true)) {
                if ((this.tableGetPayrollByInstructor != null)) {
                    this.tableGetPayrollByInstructor.InitVars();
                }
            }
            this.tableviewInstructorPaymentDetails = ((viewInstructorPaymentDetailsDataTable)(base.Tables["viewInstructorPaymentDetails"]));
            if ((initTable == true)) {
                if ((this.tableviewInstructorPaymentDetails != null)) {
                    this.tableviewInstructorPaymentDetails.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableviewPayrollByInstructor = new viewPayrollByInstructorDataTable();
            base.Tables.Add(this.tableviewPayrollByInstructor);
            this.tableGetPayrollByInstructor = new GetPayrollByInstructorDataTable();
            base.Tables.Add(this.tableGetPayrollByInstructor);
            this.tableviewInstructorPaymentDetails = new viewInstructorPaymentDetailsDataTable();
            base.Tables.Add(this.tableviewInstructorPaymentDetails);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewPayrollByInstructor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPayrollByInstructor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviewInstructorPaymentDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void viewPayrollByInstructorRowChangeEventHandler(object sender, viewPayrollByInstructorRowChangeEvent e);
        
        public delegate void GetPayrollByInstructorRowChangeEventHandler(object sender, GetPayrollByInstructorRowChangeEvent e);
        
        public delegate void viewInstructorPaymentDetailsRowChangeEventHandler(object sender, viewInstructorPaymentDetailsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewPayrollByInstructorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTeacherID;
            
            private System.Data.DataColumn columnInstructorName;
            
            private System.Data.DataColumn columnTotalHours;
            
            private System.Data.DataColumn columnHourlyRate;
            
            private System.Data.DataColumn columnBasePayField;
            
            private System.Data.DataColumn columnTotal;
            
            private System.Data.DataColumn columnDayType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorDataTable() {
                this.TableName = "viewPayrollByInstructor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPayrollByInstructorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewPayrollByInstructorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TeacherIDColumn {
                get {
                    return this.columnTeacherID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalHoursColumn {
                get {
                    return this.columnTotalHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HourlyRateColumn {
                get {
                    return this.columnHourlyRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BasePayFieldColumn {
                get {
                    return this.columnBasePayField;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DayTypeColumn {
                get {
                    return this.columnDayType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow this[int index] {
                get {
                    return ((viewPayrollByInstructorRow)(this.Rows[index]));
                }
            }
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowChanging;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowChanged;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowDeleting;
            
            public event viewPayrollByInstructorRowChangeEventHandler viewPayrollByInstructorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewPayrollByInstructorRow(viewPayrollByInstructorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow AddviewPayrollByInstructorRow(int TeacherID, string InstructorName, decimal TotalHours, decimal HourlyRate, decimal BasePayField, decimal Total, string DayType) {
                viewPayrollByInstructorRow rowviewPayrollByInstructorRow = ((viewPayrollByInstructorRow)(this.NewRow()));
                rowviewPayrollByInstructorRow.ItemArray = new object[] {
                        TeacherID,
                        InstructorName,
                        TotalHours,
                        HourlyRate,
                        BasePayField,
                        Total,
                        DayType};
                this.Rows.Add(rowviewPayrollByInstructorRow);
                return rowviewPayrollByInstructorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                viewPayrollByInstructorDataTable cln = ((viewPayrollByInstructorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new viewPayrollByInstructorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeacherID = base.Columns["TeacherID"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnTotalHours = base.Columns["TotalHours"];
                this.columnHourlyRate = base.Columns["HourlyRate"];
                this.columnBasePayField = base.Columns["BasePayField"];
                this.columnTotal = base.Columns["Total"];
                this.columnDayType = base.Columns["DayType"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeacherID = new System.Data.DataColumn("TeacherID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherID);
                this.columnInstructorName = new System.Data.DataColumn("InstructorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnTotalHours = new System.Data.DataColumn("TotalHours", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHours);
                this.columnHourlyRate = new System.Data.DataColumn("HourlyRate", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHourlyRate);
                this.columnBasePayField = new System.Data.DataColumn("BasePayField", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePayField);
                this.columnTotal = new System.Data.DataColumn("Total", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnDayType = new System.Data.DataColumn("DayType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayType);
                this.columnInstructorName.MaxLength = 512;
                this.columnTotal.ReadOnly = true;
                this.columnDayType.AllowDBNull = false;
                this.columnDayType.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow NewviewPayrollByInstructorRow() {
                return ((viewPayrollByInstructorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new viewPayrollByInstructorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(viewPayrollByInstructorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewPayrollByInstructorRowChanged != null)) {
                    this.viewPayrollByInstructorRowChanged(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewPayrollByInstructorRowChanging != null)) {
                    this.viewPayrollByInstructorRowChanging(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewPayrollByInstructorRowDeleted != null)) {
                    this.viewPayrollByInstructorRowDeleted(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewPayrollByInstructorRowDeleting != null)) {
                    this.viewPayrollByInstructorRowDeleting(this, new viewPayrollByInstructorRowChangeEvent(((viewPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewPayrollByInstructorRow(viewPayrollByInstructorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewPayrollByInstructorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPayrollByInstructorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTeacherID;
            
            private System.Data.DataColumn columnInstructorName;
            
            private System.Data.DataColumn columnTotalHours;
            
            private System.Data.DataColumn columnHourlyRate;
            
            private System.Data.DataColumn columnBasePayField;
            
            private System.Data.DataColumn columnTotal;
            
            private System.Data.DataColumn columnDayType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorDataTable() {
                this.TableName = "GetPayrollByInstructor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPayrollByInstructorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPayrollByInstructorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TeacherIDColumn {
                get {
                    return this.columnTeacherID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalHoursColumn {
                get {
                    return this.columnTotalHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HourlyRateColumn {
                get {
                    return this.columnHourlyRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BasePayFieldColumn {
                get {
                    return this.columnBasePayField;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DayTypeColumn {
                get {
                    return this.columnDayType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow this[int index] {
                get {
                    return ((GetPayrollByInstructorRow)(this.Rows[index]));
                }
            }
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowChanging;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowChanged;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowDeleting;
            
            public event GetPayrollByInstructorRowChangeEventHandler GetPayrollByInstructorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPayrollByInstructorRow(GetPayrollByInstructorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow AddGetPayrollByInstructorRow(int TeacherID, string InstructorName, decimal TotalHours, decimal HourlyRate, decimal BasePayField, decimal Total, string DayType) {
                GetPayrollByInstructorRow rowGetPayrollByInstructorRow = ((GetPayrollByInstructorRow)(this.NewRow()));
                rowGetPayrollByInstructorRow.ItemArray = new object[] {
                        TeacherID,
                        InstructorName,
                        TotalHours,
                        HourlyRate,
                        BasePayField,
                        Total,
                        DayType};
                this.Rows.Add(rowGetPayrollByInstructorRow);
                return rowGetPayrollByInstructorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetPayrollByInstructorDataTable cln = ((GetPayrollByInstructorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetPayrollByInstructorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeacherID = base.Columns["TeacherID"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnTotalHours = base.Columns["TotalHours"];
                this.columnHourlyRate = base.Columns["HourlyRate"];
                this.columnBasePayField = base.Columns["BasePayField"];
                this.columnTotal = base.Columns["Total"];
                this.columnDayType = base.Columns["DayType"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeacherID = new System.Data.DataColumn("TeacherID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherID);
                this.columnInstructorName = new System.Data.DataColumn("InstructorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnTotalHours = new System.Data.DataColumn("TotalHours", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHours);
                this.columnHourlyRate = new System.Data.DataColumn("HourlyRate", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHourlyRate);
                this.columnBasePayField = new System.Data.DataColumn("BasePayField", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePayField);
                this.columnTotal = new System.Data.DataColumn("Total", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnDayType = new System.Data.DataColumn("DayType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayType);
                this.columnTeacherID.ReadOnly = true;
                this.columnInstructorName.ReadOnly = true;
                this.columnInstructorName.MaxLength = 512;
                this.columnTotalHours.ReadOnly = true;
                this.columnHourlyRate.ReadOnly = true;
                this.columnTotal.ReadOnly = true;
                this.columnDayType.ReadOnly = true;
                this.columnDayType.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow NewGetPayrollByInstructorRow() {
                return ((GetPayrollByInstructorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetPayrollByInstructorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetPayrollByInstructorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPayrollByInstructorRowChanged != null)) {
                    this.GetPayrollByInstructorRowChanged(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPayrollByInstructorRowChanging != null)) {
                    this.GetPayrollByInstructorRowChanging(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPayrollByInstructorRowDeleted != null)) {
                    this.GetPayrollByInstructorRowDeleted(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPayrollByInstructorRowDeleting != null)) {
                    this.GetPayrollByInstructorRowDeleting(this, new GetPayrollByInstructorRowChangeEvent(((GetPayrollByInstructorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPayrollByInstructorRow(GetPayrollByInstructorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPayrollByInstructorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viewInstructorPaymentDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCalendarEventId;
            
            private System.Data.DataColumn columnTeacherId;
            
            private System.Data.DataColumn columnInstructorName;
            
            private System.Data.DataColumn columnStartDateTime;
            
            private System.Data.DataColumn columnEndDateTime;
            
            private System.Data.DataColumn columnClientName;
            
            private System.Data.DataColumn columnClientNickName;
            
            private System.Data.DataColumn columnProgramName;
            
            private System.Data.DataColumn columnClass;
            
            private System.Data.DataColumn columnJobType;
            
            private System.Data.DataColumn columnDayName;
            
            private System.Data.DataColumn columnScheduledHours;
            
            private System.Data.DataColumn columnPaidHours;
            
            private System.Data.DataColumn columnHomeworkMinutes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsDataTable() {
                this.TableName = "viewInstructorPaymentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewInstructorPaymentDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viewInstructorPaymentDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalendarEventIdColumn {
                get {
                    return this.columnCalendarEventId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TeacherIdColumn {
                get {
                    return this.columnTeacherId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstructorNameColumn {
                get {
                    return this.columnInstructorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EndDateTimeColumn {
                get {
                    return this.columnEndDateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientNickNameColumn {
                get {
                    return this.columnClientNickName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProgramNameColumn {
                get {
                    return this.columnProgramName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobTypeColumn {
                get {
                    return this.columnJobType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DayNameColumn {
                get {
                    return this.columnDayName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScheduledHoursColumn {
                get {
                    return this.columnScheduledHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaidHoursColumn {
                get {
                    return this.columnPaidHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HomeworkMinutesColumn {
                get {
                    return this.columnHomeworkMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow this[int index] {
                get {
                    return ((viewInstructorPaymentDetailsRow)(this.Rows[index]));
                }
            }
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowChanging;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowChanged;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowDeleting;
            
            public event viewInstructorPaymentDetailsRowChangeEventHandler viewInstructorPaymentDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddviewInstructorPaymentDetailsRow(viewInstructorPaymentDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow AddviewInstructorPaymentDetailsRow(int CalendarEventId, int TeacherId, string InstructorName, System.DateTime StartDateTime, System.DateTime EndDateTime, string ClientName, string ClientNickName, string ProgramName, string Class, string JobType, string DayName, decimal ScheduledHours, decimal PaidHours, decimal HomeworkMinutes) {
                viewInstructorPaymentDetailsRow rowviewInstructorPaymentDetailsRow = ((viewInstructorPaymentDetailsRow)(this.NewRow()));
                rowviewInstructorPaymentDetailsRow.ItemArray = new object[] {
                        CalendarEventId,
                        TeacherId,
                        InstructorName,
                        StartDateTime,
                        EndDateTime,
                        ClientName,
                        ClientNickName,
                        ProgramName,
                        Class,
                        JobType,
                        DayName,
                        ScheduledHours,
                        PaidHours,
                        HomeworkMinutes};
                this.Rows.Add(rowviewInstructorPaymentDetailsRow);
                return rowviewInstructorPaymentDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow FindByCalendarEventId(int CalendarEventId) {
                return ((viewInstructorPaymentDetailsRow)(this.Rows.Find(new object[] {
                            CalendarEventId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                viewInstructorPaymentDetailsDataTable cln = ((viewInstructorPaymentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new viewInstructorPaymentDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCalendarEventId = base.Columns["CalendarEventId"];
                this.columnTeacherId = base.Columns["TeacherId"];
                this.columnInstructorName = base.Columns["InstructorName"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnEndDateTime = base.Columns["EndDateTime"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnClientNickName = base.Columns["ClientNickName"];
                this.columnProgramName = base.Columns["ProgramName"];
                this.columnClass = base.Columns["Class"];
                this.columnJobType = base.Columns["JobType"];
                this.columnDayName = base.Columns["DayName"];
                this.columnScheduledHours = base.Columns["ScheduledHours"];
                this.columnPaidHours = base.Columns["PaidHours"];
                this.columnHomeworkMinutes = base.Columns["HomeworkMinutes"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCalendarEventId = new System.Data.DataColumn("CalendarEventId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarEventId);
                this.columnTeacherId = new System.Data.DataColumn("TeacherId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeacherId);
                this.columnInstructorName = new System.Data.DataColumn("InstructorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructorName);
                this.columnStartDateTime = new System.Data.DataColumn("StartDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnEndDateTime = new System.Data.DataColumn("EndDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDateTime);
                this.columnClientName = new System.Data.DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnClientNickName = new System.Data.DataColumn("ClientNickName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNickName);
                this.columnProgramName = new System.Data.DataColumn("ProgramName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramName);
                this.columnClass = new System.Data.DataColumn("Class", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnJobType = new System.Data.DataColumn("JobType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobType);
                this.columnDayName = new System.Data.DataColumn("DayName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayName);
                this.columnScheduledHours = new System.Data.DataColumn("ScheduledHours", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledHours);
                this.columnPaidHours = new System.Data.DataColumn("PaidHours", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaidHours);
                this.columnHomeworkMinutes = new System.Data.DataColumn("HomeworkMinutes", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomeworkMinutes);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCalendarEventId}, true));
                this.columnCalendarEventId.AllowDBNull = false;
                this.columnCalendarEventId.Unique = true;
                this.columnTeacherId.ReadOnly = true;
                this.columnInstructorName.ReadOnly = true;
                this.columnInstructorName.MaxLength = 512;
                this.columnClientName.MaxLength = 255;
                this.columnClientNickName.MaxLength = 255;
                this.columnProgramName.AllowDBNull = false;
                this.columnProgramName.MaxLength = 255;
                this.columnClass.ReadOnly = true;
                this.columnClass.MaxLength = 255;
                this.columnJobType.ReadOnly = true;
                this.columnJobType.MaxLength = 60;
                this.columnDayName.ReadOnly = true;
                this.columnDayName.MaxLength = 30;
                this.columnScheduledHours.ReadOnly = true;
                this.columnPaidHours.ReadOnly = true;
                this.columnHomeworkMinutes.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow NewviewInstructorPaymentDetailsRow() {
                return ((viewInstructorPaymentDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new viewInstructorPaymentDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(viewInstructorPaymentDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewInstructorPaymentDetailsRowChanged != null)) {
                    this.viewInstructorPaymentDetailsRowChanged(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewInstructorPaymentDetailsRowChanging != null)) {
                    this.viewInstructorPaymentDetailsRowChanging(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewInstructorPaymentDetailsRowDeleted != null)) {
                    this.viewInstructorPaymentDetailsRowDeleted(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewInstructorPaymentDetailsRowDeleting != null)) {
                    this.viewInstructorPaymentDetailsRowDeleting(this, new viewInstructorPaymentDetailsRowChangeEvent(((viewInstructorPaymentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveviewInstructorPaymentDetailsRow(viewInstructorPaymentDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viewInstructorPaymentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewPayrollByInstructorRow : System.Data.DataRow {
            
            private viewPayrollByInstructorDataTable tableviewPayrollByInstructor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewPayrollByInstructorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewPayrollByInstructor = ((viewPayrollByInstructorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherID {
                get {
                    try {
                        return ((int)(this[this.tableviewPayrollByInstructor.TeacherIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TeacherID\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TeacherIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableviewPayrollByInstructor.InstructorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'viewPayrollByInstructor\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.InstructorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.TotalHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalHours\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TotalHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HourlyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.HourlyRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HourlyRate\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.HourlyRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasePayField {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.BasePayFieldColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BasePayField\' in table \'viewPayrollByInstructor\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.BasePayFieldColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableviewPayrollByInstructor.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'viewPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewPayrollByInstructor.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayType {
                get {
                    return ((string)(this[this.tableviewPayrollByInstructor.DayTypeColumn]));
                }
                set {
                    this[this.tableviewPayrollByInstructor.DayTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIDNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TeacherIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIDNull() {
                this[this.tableviewPayrollByInstructor.TeacherIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.InstructorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableviewPayrollByInstructor.InstructorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHoursNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TotalHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHoursNull() {
                this[this.tableviewPayrollByInstructor.TotalHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHourlyRateNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.HourlyRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHourlyRateNull() {
                this[this.tableviewPayrollByInstructor.HourlyRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePayFieldNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.BasePayFieldColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePayFieldNull() {
                this[this.tableviewPayrollByInstructor.BasePayFieldColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableviewPayrollByInstructor.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableviewPayrollByInstructor.TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPayrollByInstructorRow : System.Data.DataRow {
            
            private GetPayrollByInstructorDataTable tableGetPayrollByInstructor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPayrollByInstructorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPayrollByInstructor = ((GetPayrollByInstructorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherID {
                get {
                    try {
                        return ((int)(this[this.tableGetPayrollByInstructor.TeacherIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TeacherID\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TeacherIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableGetPayrollByInstructor.InstructorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'GetPayrollByInstructor\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.InstructorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalHours {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.TotalHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalHours\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TotalHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HourlyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.HourlyRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HourlyRate\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.HourlyRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasePayField {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.BasePayFieldColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BasePayField\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.BasePayFieldColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPayrollByInstructor.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayType {
                get {
                    try {
                        return ((string)(this[this.tableGetPayrollByInstructor.DayTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DayType\' in table \'GetPayrollByInstructor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPayrollByInstructor.DayTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIDNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TeacherIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIDNull() {
                this[this.tableGetPayrollByInstructor.TeacherIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.InstructorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableGetPayrollByInstructor.InstructorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHoursNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TotalHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHoursNull() {
                this[this.tableGetPayrollByInstructor.TotalHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHourlyRateNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.HourlyRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHourlyRateNull() {
                this[this.tableGetPayrollByInstructor.HourlyRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePayFieldNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.BasePayFieldColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePayFieldNull() {
                this[this.tableGetPayrollByInstructor.BasePayFieldColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableGetPayrollByInstructor.TotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayTypeNull() {
                return this.IsNull(this.tableGetPayrollByInstructor.DayTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayTypeNull() {
                this[this.tableGetPayrollByInstructor.DayTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viewInstructorPaymentDetailsRow : System.Data.DataRow {
            
            private viewInstructorPaymentDetailsDataTable tableviewInstructorPaymentDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viewInstructorPaymentDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewInstructorPaymentDetails = ((viewInstructorPaymentDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarEventId {
                get {
                    return ((int)(this[this.tableviewInstructorPaymentDetails.CalendarEventIdColumn]));
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.CalendarEventIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TeacherId {
                get {
                    try {
                        return ((int)(this[this.tableviewInstructorPaymentDetails.TeacherIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TeacherId\' in table \'viewInstructorPaymentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.TeacherIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstructorName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.InstructorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstructorName\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.InstructorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StartDateTime\' in table \'viewInstructorPaymentDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EndDateTime\' in table \'viewInstructorPaymentDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientName\' in table \'viewInstructorPaymentDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNickName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientNickName\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramName {
                get {
                    return ((string)(this[this.tableviewInstructorPaymentDetails.ProgramNameColumn]));
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ProgramNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.ClassColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Class\' in table \'viewInstructorPaymentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ClassColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobType {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.JobTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'JobType\' in table \'viewInstructorPaymentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.JobTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DayName {
                get {
                    try {
                        return ((string)(this[this.tableviewInstructorPaymentDetails.DayNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DayName\' in table \'viewInstructorPaymentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.DayNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScheduledHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScheduledHours\' in table \'viewInstructorPaymentDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PaidHours {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.PaidHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaidHours\' in table \'viewInstructorPaymentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.PaidHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HomeworkMinutes {
                get {
                    try {
                        return ((decimal)(this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HomeworkMinutes\' in table \'viewInstructorPaymentDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeacherIdNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.TeacherIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeacherIdNull() {
                this[this.tableviewInstructorPaymentDetails.TeacherIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructorNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.InstructorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructorNameNull() {
                this[this.tableviewInstructorPaymentDetails.InstructorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.StartDateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateTimeNull() {
                this[this.tableviewInstructorPaymentDetails.StartDateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateTimeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.EndDateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateTimeNull() {
                this[this.tableviewInstructorPaymentDetails.EndDateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableviewInstructorPaymentDetails.ClientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNickNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClientNickNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNickNameNull() {
                this[this.tableviewInstructorPaymentDetails.ClientNickNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ClassColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNull() {
                this[this.tableviewInstructorPaymentDetails.ClassColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobTypeNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.JobTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobTypeNull() {
                this[this.tableviewInstructorPaymentDetails.JobTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNameNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.DayNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNameNull() {
                this[this.tableviewInstructorPaymentDetails.DayNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledHoursNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.ScheduledHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledHoursNull() {
                this[this.tableviewInstructorPaymentDetails.ScheduledHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidHoursNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.PaidHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaidHoursNull() {
                this[this.tableviewInstructorPaymentDetails.PaidHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeworkMinutesNull() {
                return this.IsNull(this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeworkMinutesNull() {
                this[this.tableviewInstructorPaymentDetails.HomeworkMinutesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewPayrollByInstructorRowChangeEvent : System.EventArgs {
            
            private viewPayrollByInstructorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRowChangeEvent(viewPayrollByInstructorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewPayrollByInstructorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPayrollByInstructorRowChangeEvent : System.EventArgs {
            
            private GetPayrollByInstructorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRowChangeEvent(GetPayrollByInstructorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPayrollByInstructorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viewInstructorPaymentDetailsRowChangeEvent : System.EventArgs {
            
            private viewInstructorPaymentDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRowChangeEvent(viewInstructorPaymentDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viewInstructorPaymentDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591